package com.mz.database.template.context.handlers;

import java.io.File;
import java.net.MalformedURLException;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;

import com.mz.database.template.context.handlers.column.*;
import com.mz.database.template.context.handlers.database.*;
import com.mz.database.template.context.handlers.function.*;
import com.mz.database.template.context.handlers.table.*;
import com.mz.database.template.handler.utilities.StringUtilities;

public class TemplateContextHandlerPackageProvider {
	private static final String NEW_LINE_CHAR = "\t\n";
	
	private static Logger logger = Logger.getLogger(TemplateContextHandlerPackageProvider.class);
	
	//Column part
	private static ArrayList<AbstractColumnTemplateContextHandler> allColumnContextHandlerArrayList = null;
	private static Iterable<AbstractColumnTemplateContextHandler> DefaultLoadColumnContextHandlerDefault()
	{
		ArrayList<AbstractColumnTemplateContextHandler> result = new ArrayList<AbstractColumnTemplateContextHandler>();
		result.add((AbstractColumnTemplateContextHandler)(new AutoColumnIndexColumnContextHandler()));
		result.add((AbstractColumnTemplateContextHandler)(new ColumnIndexColumnContextHandler()));
		result.add((AbstractColumnTemplateContextHandler)(new ColumnNameColumnContextHandler()));
		result.add((AbstractColumnTemplateContextHandler)(new ColumnValueConvertTypeColumnContextHandler()));
		result.add((AbstractColumnTemplateContextHandler)(new ColumnValueTypeColumnContextHandler()));
		result.add((AbstractColumnTemplateContextHandler)(new IsAutoColumnAFirstAutoColumnContextHandler()));
		result.add((AbstractColumnTemplateContextHandler)(new IsAutoColumnALastAutoColumnContextHandler()));
		result.add((AbstractColumnTemplateContextHandler)(new IsAutoColumnNotAFirstAutoColumnContextHandler()));
		result.add((AbstractColumnTemplateContextHandler)(new IsAutoColumnNotALastAutoColumnContextHandler()));
		result.add((AbstractColumnTemplateContextHandler)(new IsColumnAFirstColumnContextHandler()));
		result.add((AbstractColumnTemplateContextHandler)(new IsColumnALastColumnContextHandler()));
		result.add((AbstractColumnTemplateContextHandler)(new IsColumnAutoGeneratedValueColumnContextHandler()));
		result.add((AbstractColumnTemplateContextHandler)(new IsColumnNotAFirstColumnContextHandler()));
		result.add((AbstractColumnTemplateContextHandler)(new IsColumnNotALastColumnContextHandler()));
		result.add((AbstractColumnTemplateContextHandler)(new IsColumnNotAutoGeneratedValueColumnContextHandler2()));
		result.add((AbstractColumnTemplateContextHandler)(new IsColumnNotNullValueColumnContextHandler()));
		result.add((AbstractColumnTemplateContextHandler)(new IsColumnNotPrimaryKeyColumnContextHandler()));
		result.add((AbstractColumnTemplateContextHandler)(new IsColumnPrimaryKeyColumnContextHandler()));
		result.add((AbstractColumnTemplateContextHandler)(new IsNotAutoColumnAFirstAutoColumnContextHandler()));
		result.add((AbstractColumnTemplateContextHandler)(new IsNotAutoColumnALastAutoColumnContextHandler()));
		result.add((AbstractColumnTemplateContextHandler)(new IsNotAutoColumnNotAFirstAutoColumnContextHandler()));
		result.add((AbstractColumnTemplateContextHandler)(new IsNotAutoColumnNotALastAutoColumnContextHandler()));
		result.add((AbstractColumnTemplateContextHandler)(new IsNotNullColumnAFirstAutoColumnContextHandler()));
		result.add((AbstractColumnTemplateContextHandler)(new IsNotNullColumnALastAutoColumnContextHandler()));
		result.add((AbstractColumnTemplateContextHandler)(new IsNotPrimaryColumnAFirstAutoColumnContextHandler()));
		result.add((AbstractColumnTemplateContextHandler)(new IsNotPrimaryColumnALastAutoColumnContextHandler()));
		result.add((AbstractColumnTemplateContextHandler)(new IsNotPrimaryColumnNotAFirstAutoColumnContextHandler()));
		result.add((AbstractColumnTemplateContextHandler)(new IsNotPrimaryColumnNotALastAutoColumnContextHandler()));
		result.add((AbstractColumnTemplateContextHandler)(new IsPrimaryColumnAFirstAutoColumnContextHandler()));
		result.add((AbstractColumnTemplateContextHandler)(new IsPrimaryColumnALastAutoColumnContextHandler()));
		result.add((AbstractColumnTemplateContextHandler)(new IsPrimaryColumnNotAFirstAutoColumnContextHandler()));
		result.add((AbstractColumnTemplateContextHandler)(new IsPrimaryColumnNotALastAutoColumnContextHandler()));
		result.add((AbstractColumnTemplateContextHandler)(new NotAutoColumnIndexColumnContextHandler()));
		result.add((AbstractColumnTemplateContextHandler)(new NotNullColumnIndexColumnContextHandler()));
		result.add((AbstractColumnTemplateContextHandler)(new NotPrimaryColumnIndexColumnContextHandler()));
		result.add((AbstractColumnTemplateContextHandler)(new PrimaryColumnIndexColumnContextHandler()));
		return result;
	}
	
	public static ArrayList<String> 
		GetDefaultLoadAndOriginalLoadColumnContextHandlerDifferenceSignatureArray()
	{
		ArrayList<String> result = new ArrayList<String>();
		Iterable<AbstractColumnTemplateContextHandler> defaultLoad = DefaultLoadColumnContextHandlerDefault();
		Iterable<AbstractColumnTemplateContextHandler> originalLoad = getAllColumnContextHandler();
		HashMap<String, AbstractColumnTemplateContextHandler> defaultLoadHashMap = new HashMap<String, AbstractColumnTemplateContextHandler>();
		for(AbstractColumnTemplateContextHandler currentDefaultLoad : defaultLoad)
		{
			defaultLoadHashMap.put(currentDefaultLoad.getTemplateHandlerSignature(), currentDefaultLoad);
		}
		
		for(AbstractColumnTemplateContextHandler currentOriginalLoad : originalLoad)
		{
			if(!defaultLoadHashMap.containsKey(currentOriginalLoad.getTemplateHandlerSignature()))
			{
				result.add(currentOriginalLoad.getTemplateHandlerSignature());
			}
		}
		return result;
	}
	
	public static Iterable<AbstractColumnTemplateContextHandler> getAllColumnContextHandler()
	{
		ArrayList<AbstractColumnTemplateContextHandler> result = new ArrayList<AbstractColumnTemplateContextHandler>();
		String packageNameSlashed =  AbstractColumnTemplateContextHandler.class.getPackage().getName().replace(".", "/");
		if(allColumnContextHandlerArrayList == null)
		{
			logger.warn("URL Loading");  
			URL directoryURL =  Thread.currentThread().getContextClassLoader().getResource(packageNameSlashed);
			
			if (directoryURL == null) {  
				logger.warn("Could not retrieve URL resource: " + packageNameSlashed);  
		        return DefaultLoadColumnContextHandlerDefault();  
		    } 
			
			String directoryString = directoryURL.getFile();  
		    if (directoryString == null) {  
		    	logger.warn("Could not find directory for URL resource: " + packageNameSlashed);  
		        return DefaultLoadColumnContextHandlerDefault();  
		    } 
			
		    File directory = new File(directoryString);  
		    if (directory.exists()) {  
		        // Get the list of the files contained in the package  
		        String[] files = directory.list();  
		        for (String fileName : files) {
				            if(fileName.endsWith(".class")) {
				            	Class<?> currentClass;
								try {
									String currentClassName = AbstractColumnTemplateContextHandler.class.getPackage().getName() + "." + fileName.substring(0, fileName.length() - 6);
									currentClass = Class.forName(currentClassName);
								} catch (ClassNotFoundException e1) {
									continue;
								}
				                if(currentClass.getSuperclass().equals(AbstractColumnTemplateContextHandler.class))
				                {
				                	try {
										result.add((AbstractColumnTemplateContextHandler)currentClass.newInstance());
									} catch (InstantiationException e) {
										e.printStackTrace();
									} catch (IllegalAccessException e) {
										e.printStackTrace();
									}
				                }
				            }
				        }
			    }
			allColumnContextHandlerArrayList = result;
		}
		else return DefaultLoadColumnContextHandlerDefault();
		return allColumnContextHandlerArrayList;
	}
	
	public static Map<String,AbstractColumnTemplateContextHandler> getStartContextWrapperStringIndexedColumnContextHandlerMap()
	{
		Iterable<AbstractColumnTemplateContextHandler> handlers = getAllColumnContextHandler();
		HashMap<String, AbstractColumnTemplateContextHandler> result =
				new HashMap<String, AbstractColumnTemplateContextHandler>();
		for(AbstractColumnTemplateContextHandler currentHandler : handlers)
		{
			result.put(currentHandler.getStartContextStringWrapper(), currentHandler);
		}
		return result;
	}
	
	public static Map<String,AbstractColumnTemplateContextHandler> getEndContextWrapperStringIndexedColumnContextHandlerMap()
	{
		Iterable<AbstractColumnTemplateContextHandler> handlers = getAllColumnContextHandler();
		HashMap<String, AbstractColumnTemplateContextHandler> result =
				new HashMap<String, AbstractColumnTemplateContextHandler>();
		for(AbstractColumnTemplateContextHandler currentHandler : handlers)
		{
			result.put(currentHandler.getEndContextStringWrapper(), currentHandler);
		}
		return result;
	}
	
	public static String getAllColumnContextHandlerSignature()
	{
		Iterable<AbstractColumnTemplateContextHandler> handlers =
				getAllColumnContextHandler();
		
		StringBuilder stringBuilder = new StringBuilder();
		stringBuilder.append("Column context handler signature");
		stringBuilder.append(NEW_LINE_CHAR);
		for(AbstractColumnTemplateContextHandler currentHandler : handlers)
		{
			stringBuilder.append(currentHandler.getTemplateHandlerSignature());
			stringBuilder.append(NEW_LINE_CHAR);
		}
		return stringBuilder.toString();
	}
	
	public static String getColumnHandlerStartContextWordAtEarliestPositionInSubmittedString(String SubmittedString)
	{	
		String result = null;
		if(!isSubmittedStringContainsAColumnHandlerStartContextWord(SubmittedString)) return result;
		
		int EarliestPosition = -1;
		if(SubmittedString == null) return null;
		int currentIndexOf;
		String currentStartWord = "";
		
		Iterable<AbstractColumnTemplateContextHandler> abatractTemplateContextHandlers =
				TemplateContextHandlerPackageProvider.getAllColumnContextHandler();
		
		for(AbstractColumnTemplateContextHandler currentHandler : abatractTemplateContextHandlers)
		{
			currentStartWord = currentHandler.getStartContextStringWrapper();
			currentIndexOf = SubmittedString.indexOf(currentStartWord);
			if(currentIndexOf >=0 && ((EarliestPosition == -1) ||( currentIndexOf < EarliestPosition))) result = currentStartWord;
		}
		
		return result;
	}
	
	public static String getColumnHandlerEndContextWordAtLatestPositionInSubmittedString(String submittedString)
	{
		String result = null;
		int EarliestPosition = -1;
		if(submittedString == null) return null;
		int currentlastIndexOf;
		String currentEndWord = "";
		
		if(!isSubmittedStringContainsAnColumnHandlerEndContextWord(submittedString)) return result;
		
		Iterable<AbstractColumnTemplateContextHandler> abatractTemplateContextHandlers =
				TemplateContextHandlerPackageProvider.getAllColumnContextHandler();
		
		for(AbstractColumnTemplateContextHandler currentHandler : abatractTemplateContextHandlers)
		{
			currentEndWord = currentHandler.getEndContextStringWrapper();
			currentlastIndexOf = submittedString.lastIndexOf(currentEndWord);
			if(currentlastIndexOf >=0 && ((EarliestPosition == -1) ||( currentlastIndexOf > EarliestPosition))) result = currentEndWord;
		}
		
		return result;
	}
	
	public static boolean isSubmittedStringContainsAColumnHandlerStartContextWord(String submittedString)
	{
		if(submittedString == null) return false;
		
		Iterable<AbstractColumnTemplateContextHandler> abatractTemplateContextHandlers =
				TemplateContextHandlerPackageProvider.getAllColumnContextHandler();
		
		for(AbstractTemplateContextHandler currentHandler : abatractTemplateContextHandlers)
		{
			if(submittedString.contains(currentHandler.getStartContextStringWrapper())) return true;
		}
		return false;
	}
	
	public static boolean isSubmittedStringContainsAnColumnHandlerEndContextWord(String submittedString)
	{
		if(submittedString == null) return false;
		
		Iterable<AbstractColumnTemplateContextHandler> abatractTemplateContextHandlers =
				TemplateContextHandlerPackageProvider.getAllColumnContextHandler();
		
		for(AbstractColumnTemplateContextHandler currentHandler : abatractTemplateContextHandlers)
		{
			if(submittedString.contains(currentHandler.getEndContextStringWrapper())) return true;
		}
		return false;
	}
	
	public static AbstractColumnTemplateContextHandler getStartContextCorrespondingColumnContextHandler(String StartContextWrapper)
	{
		if(StartContextWrapper == null) return null;
		if(StartContextWrapper.equals("")) return null;
		Map<String,AbstractColumnTemplateContextHandler> contextHandlerMap =
				getStartContextWrapperStringIndexedColumnContextHandlerMap();
		if(!contextHandlerMap.containsKey(StartContextWrapper)) return null;
		return contextHandlerMap.get(StartContextWrapper);
		
	}
	//Column Part End
	
	
	//Table Part
	private static ArrayList<AbstractTableTemplateContextHandler> allTableContextHandlerArrayList = null;
	private static Iterable<AbstractTableTemplateContextHandler> DefaultLoadTableContextHandlerDefault()
	{
		ArrayList<AbstractTableTemplateContextHandler> result = new ArrayList<AbstractTableTemplateContextHandler>();
		result.add((AbstractTableTemplateContextHandler)(new ForEachAutoGeneratedValueColumnTableContextHandler()));
		result.add((AbstractTableTemplateContextHandler)(new ForEachColumnTableContextHandler()));
		result.add((AbstractTableTemplateContextHandler)(new ForEachNotAutoGeneratedValueColumnTableContextHandler()));
		result.add((AbstractTableTemplateContextHandler)(new ForEachNotNullColumnTableContextHandler()));
		result.add((AbstractTableTemplateContextHandler)(new ForEachNotPrimaryKeyColumnTableContextHandler()));
		result.add((AbstractTableTemplateContextHandler)(new ForEachPrimaryKeyColumnTableContextHandler()));
		result.add((AbstractTableTemplateContextHandler)(new TableNameTableContextHandler()));
		return result;
	}
	
	public static ArrayList<String> 
		GetDefaultLoadAndOriginalLoadTableContextHandlerDifferenceSignatureArray()
	{
		ArrayList<String> result = new ArrayList<String>();
		Iterable<AbstractTableTemplateContextHandler> defaultLoad = DefaultLoadTableContextHandlerDefault();
		Iterable<AbstractTableTemplateContextHandler> originalLoad = getAllTableContextHandler();
		HashMap<String, AbstractTableTemplateContextHandler> defaultLoadHashMap = new HashMap<String, AbstractTableTemplateContextHandler>();
		for(AbstractTableTemplateContextHandler currentDefaultLoad : defaultLoad)
		{
			defaultLoadHashMap.put(currentDefaultLoad.getTemplateHandlerSignature(), currentDefaultLoad);
		}
		
		for(AbstractTableTemplateContextHandler currentOriginalLoad : originalLoad)
		{
			if(!defaultLoadHashMap.containsKey(currentOriginalLoad.getTemplateHandlerSignature()))
			{
				result.add(currentOriginalLoad.getTemplateHandlerSignature());
			}
		}
		return result;
	}
	
	public static Iterable<AbstractTableTemplateContextHandler> getAllTableContextHandler()
	{
		ArrayList<AbstractTableTemplateContextHandler> result = new ArrayList<AbstractTableTemplateContextHandler>();
		String packageNameSlashed =  AbstractTableTemplateContextHandler.class.getPackage().getName().replace(".", "/");
		if(allTableContextHandlerArrayList == null)
		{
			URL directoryURL = Thread.currentThread().getContextClassLoader().getResource(packageNameSlashed);
			if (directoryURL == null) {  
		        //LOG.warn("Could not retrieve URL resource: " + packageNameSlashed);  
		        return DefaultLoadTableContextHandlerDefault();  
		    } 
			
			String directoryString = directoryURL.getFile();  
		    if (directoryString == null) {  
		    //    LOG.warn("Could not find directory for URL resource: " + packageNameSlashed);  
		        return DefaultLoadTableContextHandlerDefault();  
		    } 
			
		    File directory = new File(directoryString);  
		    if (directory.exists()) {  
		        // Get the list of the files contained in the package  
		        String[] files = directory.list();  
		        for (String fileName : files) {
				            if(fileName.endsWith(".class")) {
				            	Class<?> currentClass;
								try {
									String currentClassName = AbstractTableTemplateContextHandler.class.getPackage().getName() + "." + fileName.substring(0, fileName.length() - 6);
									currentClass = Class.forName(currentClassName);
								} catch (ClassNotFoundException e1) {
									continue;
								}
				                if(currentClass.getSuperclass().equals(AbstractTableTemplateContextHandler.class))
				                {
				                	try {
										result.add((AbstractTableTemplateContextHandler)currentClass.newInstance());
									} catch (InstantiationException e) {
										e.printStackTrace();
									} catch (IllegalAccessException e) {
										e.printStackTrace();
									}
				                }
				            }
				        }
			    }
			allTableContextHandlerArrayList = result;
		}
		else DefaultLoadTableContextHandlerDefault();
		return allTableContextHandlerArrayList;
	}
	
	public static Map<String,AbstractTableTemplateContextHandler> getStartContextWrapperStringIndexedTableContextHandlerMap()
	{
		Iterable<AbstractTableTemplateContextHandler> handlers = getAllTableContextHandler();
		HashMap<String, AbstractTableTemplateContextHandler> result = new HashMap<String, AbstractTableTemplateContextHandler>();
		for(AbstractTableTemplateContextHandler currentHandler : handlers)
		{
			result.put(currentHandler.getStartContextStringWrapper(), currentHandler);
		}
		return result;
	}
	
	public static Map<String,AbstractTableTemplateContextHandler> getEndContextWrapperStringIndexedTableContextHandlerMap()
	{
		Iterable<AbstractTableTemplateContextHandler> handlers = getAllTableContextHandler();
		HashMap<String, AbstractTableTemplateContextHandler> result = new HashMap<String, AbstractTableTemplateContextHandler>();
		for(AbstractTableTemplateContextHandler currentHandler : handlers)
		{
			result.put(currentHandler.getEndContextStringWrapper(), currentHandler);
		}
		return result;
	}
	
	public static String getAllTableContextHandlerSignature()
	{
		Iterable<AbstractTableTemplateContextHandler> handlers =
				getAllTableContextHandler();
		
		StringBuilder stringBuilder = new StringBuilder();
		stringBuilder.append("Table context handler signature");
		stringBuilder.append(NEW_LINE_CHAR);
		for(AbstractTableTemplateContextHandler currentHandler : handlers)
		{
			stringBuilder.append(currentHandler.getTemplateHandlerSignature());
			stringBuilder.append(NEW_LINE_CHAR);
		}
		return stringBuilder.toString();
	}
	
	public static String getTableHandlerStartContextWordAtEarliestPositionInSubmittedString(String SubmittedString)
	{	
		String result = null;
		if(!isSubmittedStringContainsATableHandlerStartContextWord(SubmittedString)) return result;
		
		int EarliestPosition = -1;
		if(SubmittedString == null) return null;
		int currentIndexOf;
		String currentStartWord = "";
		
		Iterable<AbstractTableTemplateContextHandler> abatractTemplateContextHandlers =
				TemplateContextHandlerPackageProvider.getAllTableContextHandler();
		
		for(AbstractTableTemplateContextHandler currentHandler : abatractTemplateContextHandlers)
		{
			currentStartWord = currentHandler.getStartContextStringWrapper();
			currentIndexOf = SubmittedString.indexOf(currentStartWord);
			if(currentIndexOf >=0 && ((EarliestPosition == -1) ||( currentIndexOf < EarliestPosition))) result = currentStartWord;
		}
		
		return result;
	}
	
	public static String getTableHandlerEndContextWordAtLatestPositionInSubmittedString(String submittedString)
	{
		String result = null;
		int EarliestPosition = -1;
		if(submittedString == null) return null;
		int currentlastIndexOf;
		String currentEndWord = "";
		
		if(!isSubmittedStringContainsAnTableHandlerEndContextWord(submittedString)) return result;
		
		Iterable<AbstractTableTemplateContextHandler> abatractTemplateContextHandlers =
				TemplateContextHandlerPackageProvider.getAllTableContextHandler();
		
		for(AbstractTableTemplateContextHandler currentHandler : abatractTemplateContextHandlers)
		{
			currentEndWord = currentHandler.getEndContextStringWrapper();
			currentlastIndexOf = submittedString.lastIndexOf(currentEndWord);
			if(currentlastIndexOf >=0 && ((EarliestPosition == -1) ||( currentlastIndexOf > EarliestPosition))) result = currentEndWord;
		}
		
		return result;
	}
	
	public static boolean isSubmittedStringContainsATableHandlerStartContextWord(String submittedString)
	{
		if(submittedString == null) return false;
		
		Iterable<AbstractTableTemplateContextHandler> abatractTemplateContextHandlers =
				TemplateContextHandlerPackageProvider.getAllTableContextHandler();
		
		for(AbstractTableTemplateContextHandler currentHandler : abatractTemplateContextHandlers)
		{
			if(submittedString.contains(currentHandler.getStartContextStringWrapper())) return true;
		}
		return false;
	}
	
	public static boolean isSubmittedStringContainsAnTableHandlerEndContextWord(String submittedString)
	{
		if(submittedString == null) return false;
		
		Iterable<AbstractTableTemplateContextHandler> abatractTemplateContextHandlers =
				TemplateContextHandlerPackageProvider.getAllTableContextHandler();
		
		for(AbstractTableTemplateContextHandler currentHandler : abatractTemplateContextHandlers)
		{
			if(submittedString.contains(currentHandler.getEndContextStringWrapper())) return true;
		}
		return false;
	}
	
	public static AbstractTableTemplateContextHandler getStartContextCorrespondingTableContextHandler(String StartContextWrapper)
	{
		if(StartContextWrapper == null) return null;
		if(StartContextWrapper.equals("")) return null;
		Map<String,AbstractTableTemplateContextHandler> contextHandlerMap =
				getStartContextWrapperStringIndexedTableContextHandlerMap();
		if(!contextHandlerMap.containsKey(StartContextWrapper)) return null;
		return contextHandlerMap.get(StartContextWrapper);
		
	}
	//End Table context
	
	
	//Database context Handler Part
	private static ArrayList<AbstractDatabaseTemplateContextHandler> allDatabaseContextHandlerArrayList = null;
	private static Iterable<AbstractDatabaseTemplateContextHandler> DefaultLoadDatabaseContextHandlerDefault()
	{
		ArrayList<AbstractDatabaseTemplateContextHandler> result = new ArrayList<AbstractDatabaseTemplateContextHandler>();
		result.add((AbstractDatabaseTemplateContextHandler)(new DatabaseNameDatabaseContextHandler()));
		result.add((AbstractDatabaseTemplateContextHandler)(new ForEachTableDatabaseContextHandler()));
		return result;
	}
	
	public static ArrayList<String> 
		GetDefaultLoadAndOriginalLoadDatabaseContextHandlerDifferenceSignatureArray()
	{
		ArrayList<String> result = new ArrayList<String>();
		Iterable<AbstractDatabaseTemplateContextHandler> defaultLoad = DefaultLoadDatabaseContextHandlerDefault();
		Iterable<AbstractDatabaseTemplateContextHandler> originalLoad = getAllDatabaseContextHandler();
		HashMap<String, AbstractDatabaseTemplateContextHandler> defaultLoadHashMap = new HashMap<String, AbstractDatabaseTemplateContextHandler>();
		for(AbstractDatabaseTemplateContextHandler currentDefaultLoad : defaultLoad)
		{
			defaultLoadHashMap.put(currentDefaultLoad.getTemplateHandlerSignature(), currentDefaultLoad);
		}
		
		for(AbstractDatabaseTemplateContextHandler currentOriginalLoad : originalLoad)
		{
			if(!defaultLoadHashMap.containsKey(currentOriginalLoad.getTemplateHandlerSignature()))
			{
				result.add(currentOriginalLoad.getTemplateHandlerSignature());
			}
		}
		return result;
	}
	public static Iterable<AbstractDatabaseTemplateContextHandler> getAllDatabaseContextHandler()
	{
		ArrayList<AbstractDatabaseTemplateContextHandler> result = new ArrayList<AbstractDatabaseTemplateContextHandler>();
		String packageNameSlashed =  AbstractDatabaseTemplateContextHandler.class.getPackage().getName().replace(".", "/");
		if(allDatabaseContextHandlerArrayList == null)
		{
			URL directoryURL = Thread.currentThread().getContextClassLoader().getResource(packageNameSlashed);
			if (directoryURL == null) {  
		        //LOG.warn("Could not retrieve URL resource: " + packageNameSlashed);  
		        return DefaultLoadDatabaseContextHandlerDefault();  
		    } 
			
			String directoryString = directoryURL.getFile();  
		    if (directoryString == null) {  
		    //    LOG.warn("Could not find directory for URL resource: " + packageNameSlashed);  
		        return DefaultLoadDatabaseContextHandlerDefault();  
		    } 
			
		    File directory = new File(directoryString);  
		    if (directory.exists()) {  
		        // Get the list of the files contained in the package  
		        String[] files = directory.list();  
		        for (String fileName : files) {
				            if(fileName.endsWith(".class")) {
				            	Class<?> currentClass;
								try {
									String currentClassName = AbstractDatabaseTemplateContextHandler.class.getPackage().getName() + "." + fileName.substring(0, fileName.length() - 6);
									currentClass = Class.forName(currentClassName);
								} catch (ClassNotFoundException e1) {
									continue;
								}
				                if(currentClass.getSuperclass().equals(AbstractDatabaseTemplateContextHandler.class))
				                {
				                	try {
										result.add((AbstractDatabaseTemplateContextHandler)currentClass.newInstance());
									} catch (InstantiationException e) {
										e.printStackTrace();
									} catch (IllegalAccessException e) {
										e.printStackTrace();
									}
				                }
				            }
				        }
			    }
			allDatabaseContextHandlerArrayList = result;
		}
		else return DefaultLoadDatabaseContextHandlerDefault();
		return allDatabaseContextHandlerArrayList;
	}
	
	public static Map<String,AbstractDatabaseTemplateContextHandler> getStartContextWrapperStringIndexedDatabaseContextHandlerMap()
	{
		Iterable<AbstractDatabaseTemplateContextHandler> handlers = getAllDatabaseContextHandler();
		HashMap<String, AbstractDatabaseTemplateContextHandler> result = new HashMap<String, AbstractDatabaseTemplateContextHandler>();
		for(AbstractDatabaseTemplateContextHandler currentHandler : handlers)
		{
			result.put(currentHandler.getStartContextStringWrapper(), currentHandler);
		}
		return result;
	}
	
	public static Map<String,AbstractDatabaseTemplateContextHandler> getEndContextWrapperStringIndexedDatabaseContextHandlerMap()
	{
		Iterable<AbstractDatabaseTemplateContextHandler> handlers = getAllDatabaseContextHandler();
		HashMap<String, AbstractDatabaseTemplateContextHandler> result = new HashMap<String, AbstractDatabaseTemplateContextHandler>();
		for(AbstractDatabaseTemplateContextHandler currentHandler : handlers)
		{
			result.put(currentHandler.getEndContextStringWrapper(), currentHandler);
		}
		return result;
	}
	
	public static String getAllDatabaseContextHandlerSignature()
	{
		Iterable<AbstractDatabaseTemplateContextHandler> handlers =
				getAllDatabaseContextHandler();

		StringBuilder stringBuilder = new StringBuilder();
		
		stringBuilder.append("Database context handler signature");
		stringBuilder.append(NEW_LINE_CHAR);
		
		for(AbstractDatabaseTemplateContextHandler currentHandler : handlers)
		{
			stringBuilder.append(currentHandler.getTemplateHandlerSignature());
			stringBuilder.append(NEW_LINE_CHAR);
		}
		return stringBuilder.toString();
	}
	
	public static String getDatabaseHandlerStartContextWordAtEarliestPositionInSubmittedString(String SubmittedString)
	{	
		String result = null;
		if(!isSubmittedStringContainsADatabaseHandlerStartContextWord(SubmittedString)) return result;
		
		int EarliestPosition = -1;
		if(SubmittedString == null) return null;
		int currentIndexOf;
		String currentStartWord = "";
		
		Iterable<AbstractDatabaseTemplateContextHandler> abatractTemplateContextHandlers =
				TemplateContextHandlerPackageProvider.getAllDatabaseContextHandler();
		
		for(AbstractDatabaseTemplateContextHandler currentHandler : abatractTemplateContextHandlers)
		{
			currentStartWord = currentHandler.getStartContextStringWrapper();
			currentIndexOf = SubmittedString.indexOf(currentStartWord);
			if(currentIndexOf >=0 && ((EarliestPosition == -1) ||( currentIndexOf < EarliestPosition))) result = currentStartWord;
		}
		
		return result;
	}
	
	public static String getDatabaseHandlerEndContextWordAtLatestPositionInSubmittedString(String submittedString)
	{
		String result = null;
		int EarliestPosition = -1;
		if(submittedString == null) return null;
		int currentlastIndexOf;
		String currentEndWord = "";
		
		if(!isSubmittedStringContainsAnDatabaseHandlerEndContextWord(submittedString)) return result;
		
		Iterable<AbstractDatabaseTemplateContextHandler> abatractTemplateContextHandlers =
				TemplateContextHandlerPackageProvider.getAllDatabaseContextHandler();
		
		for(AbstractDatabaseTemplateContextHandler currentHandler : abatractTemplateContextHandlers)
		{
			currentEndWord = currentHandler.getEndContextStringWrapper();
			currentlastIndexOf = submittedString.lastIndexOf(currentEndWord);
			if(currentlastIndexOf >=0 && ((EarliestPosition == -1) ||( currentlastIndexOf > EarliestPosition))) result = currentEndWord;
		}
		
		return result;
	}
	
	public static boolean isSubmittedStringContainsADatabaseHandlerStartContextWord(String submittedString)
	{
		if(submittedString == null) return false;
		
		Iterable<AbstractDatabaseTemplateContextHandler> abatractTemplateContextHandlers =
				TemplateContextHandlerPackageProvider.getAllDatabaseContextHandler();
		
		for(AbstractDatabaseTemplateContextHandler currentHandler : abatractTemplateContextHandlers)
		{
			if(submittedString.contains(currentHandler.getStartContextStringWrapper())) return true;
		}
		return false;
	}
	
	public static boolean isSubmittedStringContainsAnDatabaseHandlerEndContextWord(String submittedString)
	{
		if(submittedString == null) return false;
		
		Iterable<AbstractDatabaseTemplateContextHandler> abatractTemplateContextHandlers =
				TemplateContextHandlerPackageProvider.getAllDatabaseContextHandler();
		
		for(AbstractDatabaseTemplateContextHandler currentHandler : abatractTemplateContextHandlers)
		{
			if(submittedString.contains(currentHandler.getEndContextStringWrapper())) return true;
		}
		return false;
	}
	
	public static AbstractDatabaseTemplateContextHandler getStartContextCorrespondingDatabaseContextHandler(String StartContextWrapper)
	{
		if(StartContextWrapper == null) return null;
		if(StartContextWrapper.equals("")) return null;
		Map<String,AbstractDatabaseTemplateContextHandler> contextHandlerMap =
				getStartContextWrapperStringIndexedDatabaseContextHandlerMap();
		if(!contextHandlerMap.containsKey(StartContextWrapper)) return null;
		return contextHandlerMap.get(StartContextWrapper);
		
	}
	//Database end context
	
	//Function start context
	private static ArrayList<AbstractFunctionTemplateContextHandler> allFunctionContextHandlerArrayList = null;
	private static Iterable<AbstractFunctionTemplateContextHandler> DefaultLoadFunctionContextHandlerDefault()
	{
		ArrayList<AbstractFunctionTemplateContextHandler> result = new ArrayList<AbstractFunctionTemplateContextHandler>();
		result.add((AbstractFunctionTemplateContextHandler)(new FirstLetterToUpperCaseFunctionTemplateHandler()));
		return result;
	}
	
	public static ArrayList<String> 
		GetDefaultLoadAndOriginalLoadFunctionContextHandlerDifferenceSignatureArray()
	{
		ArrayList<String> result = new ArrayList<String>();
		Iterable<AbstractFunctionTemplateContextHandler> defaultLoad = DefaultLoadFunctionContextHandlerDefault();
		Iterable<AbstractFunctionTemplateContextHandler> originalLoad = getAllFunctionContextHandler();
		HashMap<String, AbstractFunctionTemplateContextHandler> defaultLoadHashMap = new HashMap<String, AbstractFunctionTemplateContextHandler>();
		for(AbstractFunctionTemplateContextHandler currentDefaultLoad : defaultLoad)
		{
			defaultLoadHashMap.put(currentDefaultLoad.getTemplateHandlerSignature(), currentDefaultLoad);
		}
		
		for(AbstractFunctionTemplateContextHandler currentOriginalLoad : originalLoad)
		{
			if(!defaultLoadHashMap.containsKey(currentOriginalLoad.getTemplateHandlerSignature()))
			{
				result.add(currentOriginalLoad.getTemplateHandlerSignature());
			}
		}
		return result;
	}
	public static Iterable<AbstractFunctionTemplateContextHandler> getAllFunctionContextHandler()
	{
		ArrayList<AbstractFunctionTemplateContextHandler> result = new ArrayList<AbstractFunctionTemplateContextHandler>();
		String packageNameSlashed =  AbstractFunctionTemplateContextHandler.class.getPackage().getName().replace(".", "/");
		if(allFunctionContextHandlerArrayList == null)
		{
			URL directoryURL = Thread.currentThread().getContextClassLoader().getResource(packageNameSlashed);
			if (directoryURL == null) {  
		        //LOG.warn("Could not retrieve URL resource: " + packageNameSlashed);  
		        return DefaultLoadFunctionContextHandlerDefault();  
		    } 
			
			String directoryString = directoryURL.getFile();  
		    if (directoryString == null) {  
		    //    LOG.warn("Could not find directory for URL resource: " + packageNameSlashed);  
		        return DefaultLoadFunctionContextHandlerDefault();  
		    } 
			
		    File directory = new File(directoryString);  
		    if (directory.exists()) {  
		        // Get the list of the files contained in the package  
		        String[] files = directory.list();  
		        for (String fileName : files) {
				            if(fileName.endsWith(".class")) {
				            	Class<?> currentClass;
								try {
									String currentClassName = AbstractFunctionTemplateContextHandler.class.getPackage().getName() + "." + fileName.substring(0, fileName.length() - 6);
									currentClass = Class.forName(currentClassName);
								} catch (ClassNotFoundException e1) {
									continue;
								}
				                if(currentClass.getSuperclass().equals(AbstractFunctionTemplateContextHandler.class))
				                {
				                	try {
										result.add((AbstractFunctionTemplateContextHandler)currentClass.newInstance());
									} catch (InstantiationException e) {
										e.printStackTrace();
									} catch (IllegalAccessException e) {
										e.printStackTrace();
									}
				                }
				            }
				        }
			    }
			allFunctionContextHandlerArrayList = result;
		}else DefaultLoadFunctionContextHandlerDefault();
		return allFunctionContextHandlerArrayList;
	}
	
	public static Map<String,AbstractFunctionTemplateContextHandler> getStartContextWrapperStringIndexedFunctionContextHandlerMap()
	{
		Iterable<AbstractFunctionTemplateContextHandler> handlers = getAllFunctionContextHandler();
		HashMap<String, AbstractFunctionTemplateContextHandler> result = new HashMap<String, AbstractFunctionTemplateContextHandler>();
		for(AbstractFunctionTemplateContextHandler currentHandler : handlers)
		{
			result.put(currentHandler.getStartContextStringWrapper(), currentHandler);
		}
		return result;
	}
	
	public static Map<String,AbstractFunctionTemplateContextHandler> getEndContextWrapperStringIndexedFunctionContextHandlerMap()
	{
		Iterable<AbstractFunctionTemplateContextHandler> handlers = getAllFunctionContextHandler();
		HashMap<String, AbstractFunctionTemplateContextHandler> result = new HashMap<String, AbstractFunctionTemplateContextHandler>();
		for(AbstractFunctionTemplateContextHandler currentHandler : handlers)
		{
			result.put(currentHandler.getEndContextStringWrapper(), currentHandler);
		}
		return result;
	}
	
	public static String getAllFunctionContextHandlerSignature()
	{
		Iterable<AbstractFunctionTemplateContextHandler> handlers =
				getAllFunctionContextHandler();

		StringBuilder stringBuilder = new StringBuilder();
		
		stringBuilder.append("Function context handler signature");
		stringBuilder.append(NEW_LINE_CHAR);
		
		for(AbstractFunctionTemplateContextHandler currentHandler : handlers)
		{
			stringBuilder.append(currentHandler.getTemplateHandlerSignature());
			stringBuilder.append(NEW_LINE_CHAR);
		}
		return stringBuilder.toString();
	}
	
	public static String getFunctionHandlerStartContextWordAtEarliestPositionInSubmittedString(String SubmittedString)
	{	
		String result = null;
		if(!isSubmittedStringContainsAFunctionHandlerStartContextWord(SubmittedString)) return result;
		
		int EarliestPosition = -1;
		if(SubmittedString == null) return null;
		int currentIndexOf;
		String currentStartWord = "";
		
		Iterable<AbstractFunctionTemplateContextHandler> abatractTemplateContextHandlers =
				TemplateContextHandlerPackageProvider.getAllFunctionContextHandler();
		
		for(AbstractFunctionTemplateContextHandler currentHandler : abatractTemplateContextHandlers)
		{
			currentStartWord = currentHandler.getStartContextStringWrapper();
			currentIndexOf = SubmittedString.indexOf(currentStartWord);
			if(currentIndexOf >=0 && ((EarliestPosition == -1) ||( currentIndexOf < EarliestPosition))) result = currentStartWord;
		}
		
		return result;
	}
	
	public static String getFunctionHandlerEndContextWordAtLatestPositionInSubmittedString(String submittedString)
	{
		String result = null;
		int EarliestPosition = -1;
		if(submittedString == null) return null;
		int currentlastIndexOf;
		String currentEndWord = "";
		
		if(!isSubmittedStringContainsAnFunctionHandlerEndContextWord(submittedString)) return result;
		
		Iterable<AbstractFunctionTemplateContextHandler> abatractTemplateContextHandlers =
				TemplateContextHandlerPackageProvider.getAllFunctionContextHandler();
		
		for(AbstractFunctionTemplateContextHandler currentHandler : abatractTemplateContextHandlers)
		{
			currentEndWord = currentHandler.getEndContextStringWrapper();
			currentlastIndexOf = submittedString.lastIndexOf(currentEndWord);
			if(currentlastIndexOf >=0 && ((EarliestPosition == -1) ||( currentlastIndexOf > EarliestPosition))) result = currentEndWord;
		}
		
		return result;
	}
	
	public static boolean isSubmittedStringContainsAFunctionHandlerStartContextWord(String submittedString)
	{
		if(submittedString == null) return false;
		
		Iterable<AbstractFunctionTemplateContextHandler> abatractTemplateContextHandlers =
				TemplateContextHandlerPackageProvider.getAllFunctionContextHandler();
		
		for(AbstractFunctionTemplateContextHandler currentHandler : abatractTemplateContextHandlers)
		{
			if(submittedString.contains(currentHandler.getStartContextStringWrapper())) return true;
		}
		return false;
	}
	
	public static boolean isSubmittedStringContainsAnFunctionHandlerEndContextWord(String submittedString)
	{
		if(submittedString == null) return false;
		
		Iterable<AbstractFunctionTemplateContextHandler> abatractTemplateContextHandlers =
				TemplateContextHandlerPackageProvider.getAllFunctionContextHandler();
		
		for(AbstractFunctionTemplateContextHandler currentHandler : abatractTemplateContextHandlers)
		{
			if(submittedString.contains(currentHandler.getEndContextStringWrapper())) return true;
		}
		return false;
	}
	
	public static AbstractFunctionTemplateContextHandler getStartContextCorrespondingFunctionContextHandler(String StartContextWrapper)
	{
		if(StartContextWrapper == null) return null;
		if(StartContextWrapper.equals("")) return null;
		Map<String,AbstractFunctionTemplateContextHandler> contextHandlerMap =
				getStartContextWrapperStringIndexedFunctionContextHandlerMap();
		if(!contextHandlerMap.containsKey(StartContextWrapper)) return null;
		return contextHandlerMap.get(StartContextWrapper);
		
	}
	//Function end context
	
	public static Iterable<AbstractTemplateContextHandler> getAllContextHandler()
	{
		List<AbstractTemplateContextHandler> result = new ArrayList<AbstractTemplateContextHandler>();
		result.addAll((Collection<? extends AbstractTemplateContextHandler>) getAllColumnContextHandler());
		result.addAll((Collection<? extends AbstractTemplateContextHandler>) getAllTableContextHandler());
		result.addAll((Collection<? extends AbstractTemplateContextHandler>) getAllDatabaseContextHandler());
		return result;
	}
	
	public static String getAllContextHandlerSignature()
	{
		StringBuilder stringBuilder = new StringBuilder();
		stringBuilder.append(getAllDatabaseContextHandlerSignature());
		stringBuilder.append(NEW_LINE_CHAR);
		stringBuilder.append(getAllTableContextHandlerSignature());
		stringBuilder.append(NEW_LINE_CHAR);
		stringBuilder.append(getAllColumnContextHandlerSignature());
		stringBuilder.append(NEW_LINE_CHAR);
		stringBuilder.append(getAllFunctionContextHandlerSignature());
		stringBuilder.append(NEW_LINE_CHAR);
		return stringBuilder.toString();
	}
	
	private static Iterable<AbstractTemplateContextHandler> _allContextHandlerIterable = null;
	public static Iterable<AbstractTemplateContextHandler> getAllContextHandlerIterable()
	{
		if(_allContextHandlerIterable == null)
		{
			ArrayList<AbstractTemplateContextHandler> result = new ArrayList<AbstractTemplateContextHandler>();
			Iterable<AbstractDatabaseTemplateContextHandler> DatabaseHandlers = getAllDatabaseContextHandler();
			for(AbstractTemplateContextHandler currentHandler : DatabaseHandlers)
			{
				result.add(currentHandler);
			}
			Iterable<AbstractTableTemplateContextHandler> TableHandlers = getAllTableContextHandler();
			for(AbstractTemplateContextHandler currentHandler : TableHandlers)
			{
				result.add(currentHandler);
			}
			Iterable<AbstractColumnTemplateContextHandler> ColumnHandlers = getAllColumnContextHandler();
			for(AbstractTemplateContextHandler currentHandler : ColumnHandlers)
			{
				result.add(currentHandler);
			}
			Iterable<AbstractFunctionTemplateContextHandler> functionHandlers = getAllFunctionContextHandler();
			for(AbstractTemplateContextHandler currentHandler : functionHandlers)
			{
				result.add(currentHandler);
			}

			_allContextHandlerIterable = result;
		}
		return _allContextHandlerIterable;
	}
	
	private static Map<String,AbstractTemplateContextHandler> _startContextWrapperStringIndexedAllContextHandlerMap;
	public static Map<String,AbstractTemplateContextHandler> getStartContextWrapperStringIndexedAllContextHandlerMap()
	{
		if(_startContextWrapperStringIndexedAllContextHandlerMap == null)
		{
			HashMap<String, AbstractTemplateContextHandler> result = new HashMap<String, AbstractTemplateContextHandler>();
			Iterable<AbstractTemplateContextHandler> DatabaseHandlers = getAllContextHandlerIterable();
			for(AbstractTemplateContextHandler currentHandler : DatabaseHandlers)
			{
				result.put(currentHandler.getStartContextStringWrapper(), currentHandler);
			}
			_startContextWrapperStringIndexedAllContextHandlerMap = result;
		}
		return _startContextWrapperStringIndexedAllContextHandlerMap;
	}
	
	private static Map<String,AbstractTemplateContextHandler> _endContextWrapperStringIndexedAllContextHandlerMap;
	public Map<String,AbstractTemplateContextHandler> getEndContextWrapperStringIndexedAllContextHandlerMap()
	{
		if(_endContextWrapperStringIndexedAllContextHandlerMap == null)
		{
			HashMap<String, AbstractTemplateContextHandler> result = new HashMap<String, AbstractTemplateContextHandler>();
			Iterable<AbstractTemplateContextHandler> DatabaseHandlers = getAllContextHandlerIterable();
			for(AbstractTemplateContextHandler currentHandler : DatabaseHandlers)
			{
				result.put(currentHandler.getEndContextStringWrapper(), currentHandler);
			}
			_endContextWrapperStringIndexedAllContextHandlerMap = result;
		}
		return _endContextWrapperStringIndexedAllContextHandlerMap;
	}
	
	
	
	public static String getHandlerStartContextWordAtEarliestPositionInSubmittedString(String SubmittedString)
	{	
		String result = null;
		if(!isSubmittedStringContainsAHandlerStartContextWord(SubmittedString)) return result;
		
		int EarliestPosition = -1;
		if(SubmittedString == null) return null;
		int currentIndexOf;
		String currentStartWord = "";
		
		Iterable<AbstractTemplateContextHandler> abatractTemplateContextHandlers =
				TemplateContextHandlerPackageProvider.getAllContextHandlerIterable();
		
		for(AbstractTemplateContextHandler currentHandler : abatractTemplateContextHandlers)
		{
			currentStartWord = currentHandler.getStartContextStringWrapper();
			currentIndexOf = SubmittedString.indexOf(currentStartWord);
			if(currentIndexOf >=0 && ((EarliestPosition == -1) ||( currentIndexOf < EarliestPosition)))
			{
				EarliestPosition = currentIndexOf;
				result = currentStartWord;
			}
		}
		
		return result;
	}
	
	public static String getHandlerStartContextWordAtLattestPositionInSubmittedString(String SubmittedString)
	{	
		String result = null;
		if(!isSubmittedStringContainsAHandlerStartContextWord(SubmittedString)) return result;
		
		int EarliestPosition = -1;
		if(SubmittedString == null) return null;
		int currentIndexOf;
		String currentStartWord = "";
		
		Iterable<AbstractTemplateContextHandler> abatractTemplateContextHandlers =
				TemplateContextHandlerPackageProvider.getAllContextHandlerIterable();
		
		for(AbstractTemplateContextHandler currentHandler : abatractTemplateContextHandlers)
		{
			currentStartWord = currentHandler.getStartContextStringWrapper();
			currentIndexOf = SubmittedString.lastIndexOf(currentStartWord);
			if(currentIndexOf >=0 && ((EarliestPosition == -1) ||( currentIndexOf > EarliestPosition)))
			{
				EarliestPosition = currentIndexOf;
				result = currentStartWord;
			}
		}
		
		return result;
	}
	
	public static String getHandlerEndContextWordAtEarliestPositionInSubmittedString(String submittedString)
	{
		String result = null;
		int EarliestPosition = -1;
		if(submittedString == null) return null;
		int currentlastIndexOf;
		String currentEndWord = "";
		
		if(!isSubmittedStringContainsAnHandlerEndContextWord(submittedString)) return result;
		
		Iterable<AbstractTemplateContextHandler> abatractTemplateContextHandlers =
				TemplateContextHandlerPackageProvider.getAllContextHandlerIterable();
		
		for(AbstractTemplateContextHandler currentHandler : abatractTemplateContextHandlers)
		{
			currentEndWord = currentHandler.getEndContextStringWrapper();
			currentlastIndexOf = submittedString.indexOf(currentEndWord);
			if(currentlastIndexOf >=0 && ((EarliestPosition == -1) ||( currentlastIndexOf < EarliestPosition)))
			{
				EarliestPosition = currentlastIndexOf;
				result = currentEndWord;
			}
		}
		
		return result;
	}
	
	public static String getHandlerEndContextWordAtLatestPositionInSubmittedString(String submittedString)
	{
		String result = null;
		int EarliestPosition = -1;
		if(submittedString == null) return null;
		int currentlastIndexOf;
		String currentEndWord = "";
		
		if(!isSubmittedStringContainsAnHandlerEndContextWord(submittedString)) return result;
		
		Iterable<AbstractTemplateContextHandler> abatractTemplateContextHandlers =
				TemplateContextHandlerPackageProvider.getAllContextHandlerIterable();
		int currentOffset =0;
		String submittedStringCopy = submittedString;
		for(AbstractTemplateContextHandler currentHandler : abatractTemplateContextHandlers)
		{
			currentEndWord = currentHandler.getEndContextStringWrapper();
			int currentSubmittedCopyEarliestIndexOf = submittedStringCopy.indexOf(currentEndWord);
			currentlastIndexOf = currentSubmittedCopyEarliestIndexOf + currentOffset;
			if(currentlastIndexOf >=0 && ((EarliestPosition == -1) ||( currentlastIndexOf > EarliestPosition)))
			{
				EarliestPosition = currentlastIndexOf;
				result = currentEndWord;
				submittedStringCopy.substring(currentSubmittedCopyEarliestIndexOf+currentEndWord.length());
			}
		}
		
		return result;
	}
	
	public static boolean isSubmittedStringContainsAHandlerStartContextWord(String submittedString)
	{
		if(submittedString == null) return false;
		
		Iterable<AbstractTemplateContextHandler> abatractTemplateContextHandlers =
				TemplateContextHandlerPackageProvider.getAllContextHandlerIterable();
		
		for(AbstractTemplateContextHandler currentHandler : abatractTemplateContextHandlers)
		{
			if(submittedString.contains(currentHandler.getStartContextStringWrapper())) return true;
		}
		return false;
	}
	
	public static boolean isSubmittedStringContainsAnHandlerEndContextWord(String submittedString)
	{
		if(submittedString == null) return false;
		
		Iterable<AbstractTemplateContextHandler> abatractTemplateContextHandlers =
				TemplateContextHandlerPackageProvider.getAllContextHandlerIterable();
		
		for(AbstractTemplateContextHandler currentHandler : abatractTemplateContextHandlers)
		{
			if(submittedString.contains(currentHandler.getEndContextStringWrapper())) return true;
		}
		return false;
	}
	
	public static int countStartContextWordInSubmittedString(String submittedString)
	{
		int result = 0;
		if(submittedString == null) return result;
		if(submittedString.isEmpty()) return result;
		String FirstStartContextWordTrimmedString = submittedString;
		String startContextWord =getHandlerStartContextWordAtEarliestPositionInSubmittedString(FirstStartContextWordTrimmedString);
		while(startContextWord!=null)
		{
			FirstStartContextWordTrimmedString = StringUtilities.
				getRightPartOfSubmittedStringAfterFirstSearchedWordOccurence(
						FirstStartContextWordTrimmedString, startContextWord);
			startContextWord =
					getHandlerStartContextWordAtEarliestPositionInSubmittedString(
							FirstStartContextWordTrimmedString);
			result++;
		}
		return result;
	}
	
	public static int countEndContextWordInSubmittedString(String submittedString)
	{
		int result = 0;
		if(submittedString == null) return result;
		if(submittedString.isEmpty()) return result;
		String FirstEndContextWordTrimmedString = submittedString;
		String endContextWord =getHandlerEndContextWordAtEarliestPositionInSubmittedString(submittedString);
		while(endContextWord!=null)
		{
			FirstEndContextWordTrimmedString = StringUtilities.
				getRightPartOfSubmittedStringAfterFirstSearchedWordOccurence(
						FirstEndContextWordTrimmedString, endContextWord);
			endContextWord =
					getHandlerEndContextWordAtEarliestPositionInSubmittedString(
							FirstEndContextWordTrimmedString);
			result++;
		}
		return result;
	}
	
	public static String getStartContextCorrespondingEndContextWrapper(String StartContextWrapper)
	{
		if(StartContextWrapper == null) return null;
		if(StartContextWrapper.equals("")) return null;
		Map<String,AbstractTemplateContextHandler> contextHandlerMap =
				getStartContextWrapperStringIndexedAllContextHandlerMap();
		if(!contextHandlerMap.containsKey(StartContextWrapper)) return null;
		return contextHandlerMap.get(StartContextWrapper).getEndContextStringWrapper();
	}
	
	public static AbstractTemplateContextHandler getStartContextCorrespondingContextHandler(String StartContextWrapper)
	{
		if(StartContextWrapper == null) return null;
		if(StartContextWrapper.equals("")) return null;
		Map<String,AbstractTemplateContextHandler> contextHandlerMap =
				getStartContextWrapperStringIndexedAllContextHandlerMap();
		if(!contextHandlerMap.containsKey(StartContextWrapper)) return null;
		return contextHandlerMap.get(StartContextWrapper);
	}
}
