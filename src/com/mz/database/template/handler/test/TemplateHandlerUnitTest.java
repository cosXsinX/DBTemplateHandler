package com.mz.database.template.handler.test;

import java.util.ArrayList;
import org.apache.log4j.Logger;
import org.junit.Before;
import org.junit.Test;

import com.mz.database.descriptors.AbstractDatabaseDescriptor;
import com.mz.database.descriptors.SQLLiteDatabaseDescriptor;
import com.mz.database.models.DatabaseDescriptionPOJO;
import com.mz.database.models.TableColumnDescriptionPOJO;
import com.mz.database.models.TableDescriptionPOJO;
import com.mz.database.template.context.handlers.AbstractTemplateContextHandler;
import com.mz.database.template.context.handlers.TemplateContextHandlerPackageProvider;
import com.mz.database.template.context.handlers.column.AbstractColumnTemplateContextHandler;
import com.mz.database.template.context.handlers.column.ColumnIndexColumnContextHandler;
import com.mz.database.template.context.handlers.column.ColumnNameColumnContextHandler;
import com.mz.database.template.context.handlers.column.IsColumnAFirstColumnContextHandler;
import com.mz.database.template.context.handlers.column.IsColumnALastColumnContextHandler;
import com.mz.database.template.context.handlers.column.IsColumnAutoGeneratedValueColumnContextHandler;
import com.mz.database.template.context.handlers.column.IsColumnNotAutoGeneratedValueColumnContextHandler2;
import com.mz.database.template.context.handlers.column.IsColumnNotNullValueColumnContextHandler;
import com.mz.database.template.context.handlers.column.IsColumnPrimaryKeyColumnContextHandler;
import com.mz.database.template.context.handlers.database.ForEachTableDatabaseContextHandler;
import com.mz.database.template.context.handlers.function.FirstLetterToUpperCaseFunctionTemplateHandler;
import com.mz.database.template.context.handlers.table.ForEachColumnTableContextHandler;
import com.mz.database.template.context.handlers.table.TableNameTableContextHandler;
import com.mz.database.template.handler.TableTemplateHandler;
import com.mz.database.template.handler.TemplateHandlerNew;
import com.mz.database.template.handler.TemplateValidator;
import com.mz.database.template.handler.utilities.StringUtilities;
import com.mz.database.template.semantic.TemplateSemanticReferenceClass;

import junit.framework.Assert;

public class TemplateHandlerUnitTest {
	
	private final static Logger LOGGER = Logger.getLogger(TemplateHandlerUnitTest.class);
	
	
	private final static String DATABASE_NAME = "DATABASE_NAME";
	DatabaseDescriptionPOJO _databaseDescriptionPojo;
	private void InitDatabaseDescriptionPOJO(){
		_databaseDescriptionPojo = new DatabaseDescriptionPOJO();
		_databaseDescriptionPojo.setDatabaseNameStr(DATABASE_NAME);
		ArrayList<TableDescriptionPOJO> tableList = new ArrayList<TableDescriptionPOJO>();
		tableList.add(_firstTableDescriptionPOJO);
		tableList.add(_secondTableDescriptionPOJO);
		_databaseDescriptionPojo.setTableList(tableList);
	}
	
	
	private final static String FIRST_TABLE_NAME = "FIRST_TABLE_NAME";
	TableDescriptionPOJO _firstTableDescriptionPOJO;
	private void InitFirstTableDescriptionPOJO()
	{
		_firstTableDescriptionPOJO = new TableDescriptionPOJO(FIRST_TABLE_NAME);
		_firstTableDescriptionPOJO.set_NameStr(FIRST_TABLE_NAME);
		_firstTableDescriptionPOJO.AddColumn(_primaryNotAutoColumnDescriptionPOJO);
		_firstTableDescriptionPOJO.AddColumn(_autoColumnDescriptionPOJO);
	}
	
	private final static String SECOND_TABLE_NAME = "SECOND_TABLE_NAME";
	TableDescriptionPOJO _secondTableDescriptionPOJO;
	private void InitSecondTableDescriptionPOJO()
	{
		_secondTableDescriptionPOJO = new TableDescriptionPOJO(SECOND_TABLE_NAME);
		_secondTableDescriptionPOJO.AddColumn(_primaryNotAutoColumnDescriptionPOJO);
		_secondTableDescriptionPOJO.AddColumn(_autoColumnDescriptionPOJO);
	}
	
	
	private final static String PRIMARY_NOT_AUTO_COLUMN_NAME = "PRIMARY_NOT_AUTO_COLUMN_NAME";
	private final static String PRIMARY_NOT_AUTO_SQLLITE_TYPE = "INT";
	TableColumnDescriptionPOJO _primaryNotAutoColumnDescriptionPOJO;
	private void InitPrimaryNotAutoColumnDescriptionPOJO()
	{
		_primaryNotAutoColumnDescriptionPOJO = 
				new TableColumnDescriptionPOJO
					(PRIMARY_NOT_AUTO_COLUMN_NAME, PRIMARY_NOT_AUTO_SQLLITE_TYPE, true);
	}
	
	private final static String AUTO_COLUMN_NAME = "AUTO_COLUMN_NAME";
	private final static String AUTO_COLUMN_SQLLITE_TYPE = "INT";
	TableColumnDescriptionPOJO _autoColumnDescriptionPOJO;
	private void InitAutoColumnDescriptionPOJO()
	{
		_autoColumnDescriptionPOJO = 
				new TableColumnDescriptionPOJO
					(AUTO_COLUMN_NAME, AUTO_COLUMN_SQLLITE_TYPE, false);
		_autoColumnDescriptionPOJO.set_AutoGeneratedValueBln(true);
	}
	
	private final static String AUTO_AND_PRIMARY_COLUMN_NAME = "AUTO_AND_PRIMARY_COLUMN_NAME";
	private final static String AUTO_AND_PRIMARY_SQLLITE_TYPE = "Int";
	TableColumnDescriptionPOJO _autoAndPrimaryColumnDescriptionPOJO;
	private void InitAutoAndPrimaryColumnDescriptionPOJO()
	{
		_autoAndPrimaryColumnDescriptionPOJO =
				new TableColumnDescriptionPOJO(AUTO_AND_PRIMARY_COLUMN_NAME, AUTO_AND_PRIMARY_SQLLITE_TYPE, true);
		_autoAndPrimaryColumnDescriptionPOJO.set_AutoGeneratedValueBln(true);
	}
	
	private final static String AUTO_AND_NOT_NULL_AND_PRIMARY_COLUMN_NAME = "AUTO_AND_NOT_NULL_AND_PRIMARY_COLUMN";
	private final static String AUTO_AND_NOT_NULL_AND_PRIMARY_SQLLITE_TYPE = "AUTO_AND_NOT_NULL_AND_PRIMARY_COLUMN";
	TableColumnDescriptionPOJO _autoAndNotNullAndPrimaryColumnDescriptionPOJO;
	private void InitAutoAndNotNullAndPrimaryColumnDescriptionPOJO()
	{
		_autoAndNotNullAndPrimaryColumnDescriptionPOJO =
				new TableColumnDescriptionPOJO(AUTO_AND_NOT_NULL_AND_PRIMARY_COLUMN_NAME,AUTO_AND_NOT_NULL_AND_PRIMARY_SQLLITE_TYPE,true);
		_autoAndNotNullAndPrimaryColumnDescriptionPOJO.set_NotNull(true);
		_autoAndNotNullAndPrimaryColumnDescriptionPOJO.set_AutoGeneratedValueBln(true);
	}
	
	@Before
	public void TestInitialization()
	{
		//Columns definition Initialization
		InitPrimaryNotAutoColumnDescriptionPOJO();
		InitAutoColumnDescriptionPOJO();
		InitAutoAndPrimaryColumnDescriptionPOJO();
		InitAutoAndNotNullAndPrimaryColumnDescriptionPOJO();
		
		//Tables definition Initialization
		InitFirstTableDescriptionPOJO();
		InitSecondTableDescriptionPOJO();
		
		//Database definition Initialization
		InitDatabaseDescriptionPOJO();
	}
	
	@Test
	public void FirstTableColumnsAsJavaTableConstantsTest()
	{
		StringBuilder submittedTemplateStringBuilder = new StringBuilder();
		submittedTemplateStringBuilder.append("public class ColumnTableTemplateJavaTestTemplate {\n");
		submittedTemplateStringBuilder.append("\tpublic final static String TABLE_NAME = \"" + TemplateSemanticReferenceClass.TEMPLATE_TABLE_WORD + "\";\n");
		submittedTemplateStringBuilder.append("\t"+TemplateSemanticReferenceClass.TEMPLATE_FOREACH_COLUMN_START_CONTEXT+"\n");
		submittedTemplateStringBuilder.append("\tpublic final static String "+TemplateSemanticReferenceClass.TEMPLATE_FOREACH_CURRENT_COLUMN_WORD+"_COLUMN = \""+TemplateSemanticReferenceClass.TEMPLATE_FOREACH_CURRENT_COLUMN_WORD+"\";\n");
		submittedTemplateStringBuilder.append("\t"+TemplateSemanticReferenceClass.TEMPLATE_FOREACH_COLUMN_END_CONTEXT+"\n");
		submittedTemplateStringBuilder.append("}\n");
		
		AbstractDatabaseDescriptor descriptor = new SQLLiteDatabaseDescriptor();
		TableTemplateHandler handler = TableTemplateHandler.TableDescriptionPOJOToTableTemplateHandler(_firstTableDescriptionPOJO, descriptor);
		String outputString = handler.generateOutputStringFromTemplateString(submittedTemplateStringBuilder.toString());
		//System.out.print(outputString);
		
		String expectedOutput = "public class ColumnTableTemplateJavaTestTemplate {\n" +
		"\tpublic final static String TABLE_NAME = \"FIRST_TABLE_NAME\";\n" +
		"\t\n" +
		"\t\n" +
		"\tpublic final static String PRIMARY_NOT_AUTO_COLUMN_NAME_COLUMN = \"PRIMARY_NOT_AUTO_COLUMN_NAME\";\n"+
		"\tpublic final static String AUTO_COLUMN_NAME_COLUMN = \"AUTO_COLUMN_NAME\";\n"+
		"}\n";
		
		Assert.assertEquals(expectedOutput, outputString);
	}
	
//	@Test
//	public void FirstTableAsJavaPOJOTest(){
//		StringBuilder submittedTemplateStringBuilder = new StringBuilder();
//
//				
//		submittedTemplateStringBuilder.append("public class "+TemplateSemanticReferenceClass.TEMPLATE_TABLE_WORD+"RecordPOJO {\n");
//		submittedTemplateStringBuilder.append("\n");
//		submittedTemplateStringBuilder.append("	" +TemplateSemanticReferenceClass.TEMPLATE_FOREACH_COLUMN_START_CONTEXT+ "\n");
//		submittedTemplateStringBuilder.append("	private "+ TemplateSemanticReferenceClass.TEMPLATE_FOREACH_CURRENT_COLUMN_TYPE_CONVERT_START_CONTEXT +"JAVA"+TemplateSemanticReferenceClass.TEMPLATE_FOREACH_CURRENT_COLUMN_TYPE_CONVERT_END_CONTEXT+" _" + TemplateSemanticReferenceClass.TEMPLATE_FOREACH_CURRENT_COLUMN_WORD + ""+ TemplateSemanticReferenceClass.TEMPLATE_FOREACH_CURRENT_COLUMN_TYPE_CONVERT_START_CONTEXT +"JAVA"+TemplateSemanticReferenceClass.TEMPLATE_FOREACH_CURRENT_COLUMN_TYPE_CONVERT_END_CONTEXT+";\n");
//		submittedTemplateStringBuilder.append("	\n");
//		submittedTemplateStringBuilder.append("	public String get"+TemplateSemanticReferenceClass.TEMPLATE_FOREACH_CURRENT_COLUMN_WORD+""+ TemplateSemanticReferenceClass.TEMPLATE_FOREACH_CURRENT_COLUMN_TYPE_CONVERT_START_CONTEXT +"JAVA"+TemplateSemanticReferenceClass.TEMPLATE_FOREACH_CURRENT_COLUMN_TYPE_CONVERT_END_CONTEXT+"(){\n");
//		submittedTemplateStringBuilder.append("		return _"+TemplateSemanticReferenceClass.TEMPLATE_FOREACH_CURRENT_COLUMN_WORD+""+ TemplateSemanticReferenceClass.TEMPLATE_FOREACH_CURRENT_COLUMN_TYPE_CONVERT_START_CONTEXT +"JAVA"+TemplateSemanticReferenceClass.TEMPLATE_FOREACH_CURRENT_COLUMN_TYPE_CONVERT_END_CONTEXT+";\n");
//		submittedTemplateStringBuilder.append("	}\n");
//		submittedTemplateStringBuilder.append("\n");
//		submittedTemplateStringBuilder.append("	" + TemplateSemanticReferenceClass.TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_NOT_PRIMARY_KEY_START_CONTEXT + "\n");
//		submittedTemplateStringBuilder.append("	public void set"+TemplateSemanticReferenceClass.TEMPLATE_FOREACH_CURRENT_COLUMN_WORD+""+ TemplateSemanticReferenceClass.TEMPLATE_FOREACH_CURRENT_COLUMN_TYPE_CONVERT_START_CONTEXT +"JAVA"+TemplateSemanticReferenceClass.TEMPLATE_FOREACH_CURRENT_COLUMN_TYPE_CONVERT_END_CONTEXT+"("+ TemplateSemanticReferenceClass.TEMPLATE_FOREACH_CURRENT_COLUMN_TYPE_CONVERT_START_CONTEXT +"JAVA"+TemplateSemanticReferenceClass.TEMPLATE_FOREACH_CURRENT_COLUMN_TYPE_CONVERT_END_CONTEXT+" value){\n");
//		submittedTemplateStringBuilder.append("		_"+TemplateSemanticReferenceClass.TEMPLATE_FOREACH_CURRENT_COLUMN_WORD+""+ TemplateSemanticReferenceClass.TEMPLATE_FOREACH_CURRENT_COLUMN_TYPE_CONVERT_START_CONTEXT +"JAVA"+TemplateSemanticReferenceClass.TEMPLATE_FOREACH_CURRENT_COLUMN_TYPE_CONVERT_END_CONTEXT+" = value;\n");
//		submittedTemplateStringBuilder.append("	}\n");
//		submittedTemplateStringBuilder.append("\n");
//		submittedTemplateStringBuilder.append("	" + TemplateSemanticReferenceClass.TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_NOT_PRIMARY_KEY_END_CONTEXT + "\n");
//		submittedTemplateStringBuilder.append("	" + TemplateSemanticReferenceClass.TEMPLATE_FOREACH_COLUMN_END_CONTEXT + "\n");
//		submittedTemplateStringBuilder.append("}\n");
//		submittedTemplateStringBuilder.append("	\n");
//		
//		String outputString = "";
//		try {
//			outputString =TemplateHandlerNew.HandleTableTemplate(submittedTemplateStringBuilder.toString(), _firstTableDescriptionPOJO);
//		} catch (Exception e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
//		
////		AbstractDatabaseDescriptor descriptor = new SQLLiteDatabaseDescriptor();
////		TableTemplateHandler handler = TableTemplateHandler.TableDescriptionPOJOToTableTemplateHandler(_firstTableDescriptionPOJO, descriptor);
////		String submittedString = submittedTemplateStringBuilder.toString();
////		//System.out.println("submittedString:" + submittedString);
////		
////		String outputString = handler.generateOutputStringFromTemplateString(submittedString);
////		//System.out.print(outputString);
////		
//		String expectedOutput = "public class FIRST_TABLE_NAMERecordPOJO {" +
//			"\n"+
//			"\n"+
//			"\t\n"+
//			"\t\n"+
//			"\tprivate int _PRIMARY_NOT_AUTO_COLUMN_NAMEint;\n" +
//			"\t\n"+
//			"\tpublic String getPRIMARY_NOT_AUTO_COLUMN_NAMEint(){\n" +
//			"\t\treturn _PRIMARY_NOT_AUTO_COLUMN_NAMEint;\n" +
//			"\t}\n"+
//			"\n"+
//			"\n"+
//			"\tprivate int _AUTO_COLUMN_NAMEint;\n"+
//			"\t\n" +
//			"\tpublic String getAUTO_COLUMN_NAMEint(){\n" +
//			"\t\treturn _AUTO_COLUMN_NAMEint;\n" +
//			"\t}\n" +
//			"\n" +
//			"\n" +
//			"\tpublic void setAUTO_COLUMN_NAMEint(int value){\n" +
//			"\t\t_AUTO_COLUMN_NAMEint = value;\n" +
//			"\t}\n" +
//			"\n" +
//			"\t\n"+
//			"}\n" +
//			"\n";
//		Assert.assertEquals(expectedOutput.replace("\t", ""), outputString.replace("\t", ""));
//	}
	
	@Test
	public void GetAllTemplateContextHandlerSignatureTest()
	{
		String result = TemplateContextHandlerPackageProvider.getAllContextHandlerSignature();
		System.out.println(result);
	}
	
	@Test 
	public void Success_when_default_provided_context_handlers_are_the_same_as_original_provided_context_handlers()
	{
		ArrayList<String> columnContextHandlersDiff= 
				TemplateContextHandlerPackageProvider.GetDefaultLoadAndOriginalLoadColumnContextHandlerDifferenceSignatureArray();
		StringBuilder stringBuilder = new StringBuilder();
		for(String current : columnContextHandlersDiff)
		{
			stringBuilder.append("The column context handler '"+current+"' was added but not added to the default load methods TemplateContextHandlerPackageProvider.DefaultLoadColumnContextHandlerDefault\n");
		}
		ArrayList<String> tableContextHandlersDiff= 
				TemplateContextHandlerPackageProvider.GetDefaultLoadAndOriginalLoadTableContextHandlerDifferenceSignatureArray();
		for(String current : tableContextHandlersDiff)
		{
			stringBuilder.append("The table context handler '"+current+"' was added but not added to the default load methods TemplateContextHandlerPackageProvider.DefaultLoadTableContextHandlerDefault\n");
		}
		ArrayList<String> databaseContextHandlersDiff= 
				TemplateContextHandlerPackageProvider.GetDefaultLoadAndOriginalLoadDatabaseContextHandlerDifferenceSignatureArray();
		for(String current : databaseContextHandlersDiff)
		{
			stringBuilder.append("The database context handler '"+current+"' was added but not added to the default load methods TemplateContextHandlerPackageProvider.DefaultLoadTableContextHandlerDefault\n");
		}
		
		ArrayList<String> functionContextHandlersDiff= 
				TemplateContextHandlerPackageProvider.GetDefaultLoadAndOriginalLoadFunctionContextHandlerDifferenceSignatureArray();
		for(String current : functionContextHandlersDiff)
		{
			stringBuilder.append("The function context handler '"+current+"' was added but not added to the default load methods TemplateContextHandlerPackageProvider.DefaultLoadTableContextHandlerDefault\n");
		}
		boolean isDifference = false;
		isDifference = isDifference || (columnContextHandlersDiff.size()>0) ;
		isDifference = isDifference || (tableContextHandlersDiff.size()>0) ;
		isDifference = isDifference || (databaseContextHandlersDiff.size()>0);
		isDifference = isDifference || (functionContextHandlersDiff.size()>0);
		if(isDifference) Assert.fail(stringBuilder.toString());
		Assert.assertTrue(true);
	}
	
	@Test
	public void TestTemplateHandlerNew_getLeftPartOfSubmittedStringBeforeFirstSearchedWordOccurence()
	{
		String submittedString = "Hello I am the best and I am the most wonderful";
		String searchedWord = "am";
		String result = StringUtilities.
			getLeftPartOfSubmittedStringBeforeFirstSearchedWordOccurence(submittedString, searchedWord);
		String expectedResult = "Hello I ";
		Assert.assertEquals(expectedResult, result);
	}
	
	@Test
	public void TestTemplateHandlerNew_getRightPartOfSubmittedStringAfterFirstSearchedWordOccurence()
	{
		String submittedString = "Hello I am the best and I am the most wonderful";
		String searchedWord = "am";
		String result = StringUtilities.
			getRightPartOfSubmittedStringAfterFirstSearchedWordOccurence(submittedString, searchedWord);
		String expectedResult = " the best and I am the most wonderful";
		Assert.assertEquals(expectedResult, result);
	}
	
	@Test
	public void TemplateValidatorTest()
	{
		String submittedString = ColumnNameColumnContextHandler.TEMPLATE_TABLE_WORD;
		boolean value = TemplateValidator.TemplateStringValidation(submittedString);
		boolean expectedValue = true;
		Assert.assertEquals(expectedValue, value);
	}
	
	
	@Test
	public void Success_when_auto_column_name_is_returned()
	{
		String submittedString = ColumnNameColumnContextHandler.TEMPLATE_TABLE_WORD;
		String result = "";
		try {
			result = TemplateHandlerNew.HandleTableColumnTemplate(submittedString, _autoColumnDescriptionPOJO);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		String expectedResult = AUTO_COLUMN_NAME;
		Assert.assertEquals(expectedResult, result);
	}
	
	@Test
	public void Success_when_earliest_start_context_is_returned()
	{
		String submittedString = IsColumnNotAutoGeneratedValueColumnContextHandler2.START_CONTEXT_WORD + ColumnNameColumnContextHandler.TEMPLATE_TABLE_WORD + IsColumnNotAutoGeneratedValueColumnContextHandler2.END_CONTEXT_WORD;
		String result = TemplateContextHandlerPackageProvider.getHandlerStartContextWordAtEarliestPositionInSubmittedString(submittedString);
		String expectedResult = IsColumnNotAutoGeneratedValueColumnContextHandler2.START_CONTEXT_WORD;
		Assert.assertEquals(expectedResult, result);
	}
	
	@Test
	public void Success_when_lattest_end_context_is_returned()
	{
		String submittedString = IsColumnNotAutoGeneratedValueColumnContextHandler2.START_CONTEXT_WORD + ColumnNameColumnContextHandler.TEMPLATE_TABLE_WORD + IsColumnNotAutoGeneratedValueColumnContextHandler2.END_CONTEXT_WORD;
		String result = TemplateContextHandlerPackageProvider.getHandlerEndContextWordAtLatestPositionInSubmittedString(submittedString);
		String expectedResult = IsColumnNotAutoGeneratedValueColumnContextHandler2.END_CONTEXT_WORD;
		Assert.assertEquals(expectedResult, result);
	}
	
	@Test
	public void Success_when_lattest_start_context_is_returned()
	{
		String submittedString = IsColumnNotAutoGeneratedValueColumnContextHandler2.START_CONTEXT_WORD + ColumnNameColumnContextHandler.TEMPLATE_TABLE_WORD + IsColumnNotAutoGeneratedValueColumnContextHandler2.END_CONTEXT_WORD;
		String result = TemplateContextHandlerPackageProvider.getHandlerStartContextWordAtLattestPositionInSubmittedString(submittedString);
		String expectedResult = ColumnNameColumnContextHandler.START_CONTEXT_WORD;
		Assert.assertEquals(expectedResult, result);
	}
	
	@Test
	public void Success_when_start_context_word_does_not_contains_other_start_context_word()
	{
		Iterable<AbstractTemplateContextHandler> handlers = 
				TemplateContextHandlerPackageProvider.getAllContextHandler();
		for(AbstractTemplateContextHandler currentHandler : handlers)
		{
			for(AbstractTemplateContextHandler secondCurrentHandler : handlers)
			{
				if(secondCurrentHandler.getClass().equals(currentHandler.getClass()) ) continue;
				if(secondCurrentHandler.getStartContextStringWrapper().contains(currentHandler.getStartContextStringWrapper()))
				{
					System.out.println("'" + currentHandler.getClass().getName() + "' handler start context word :'" + secondCurrentHandler.getStartContextStringWrapper() + "' contains '" + currentHandler.getClass().getName() + "' context handler start context word '" + currentHandler.getStartContextStringWrapper() + "'");
					Assert.assertTrue(false);
					return;
				}
			}
		}
		Assert.assertTrue(true);
	}
	
	//Template validation unit test
	@Test
	public void Success_when_if_not_auto_conditionned_if_nested_name_template_string_is_validated()
	{
		String submittedString = IsColumnNotAutoGeneratedValueColumnContextHandler2.START_CONTEXT_WORD + ColumnNameColumnContextHandler.TEMPLATE_TABLE_WORD + IsColumnNotAutoGeneratedValueColumnContextHandler2.END_CONTEXT_WORD;
		boolean	result = TemplateValidator.TemplateStringValidation(submittedString);
		boolean expectedResult = true;
		Assert.assertEquals(expectedResult, result);
	}
	
	
	//Template treatment output unit tests
	@Test
	public void Success_when_no_output_for_auto_string_when_not_auto_is_specified_in_template()
	{
		String submittedString = IsColumnNotAutoGeneratedValueColumnContextHandler2.START_CONTEXT_WORD + ColumnNameColumnContextHandler.TEMPLATE_TABLE_WORD + IsColumnNotAutoGeneratedValueColumnContextHandler2.END_CONTEXT_WORD;
		String result = "";
		try {
			result = TemplateHandlerNew.HandleTableColumnTemplate(submittedString, _autoColumnDescriptionPOJO);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		String expectedResult = "";
		Assert.assertEquals(expectedResult, result);
	}
	
	@Test
	public void Success_when_output_for_auto_string_when_auto_is_specified_in_template()
	{
		String submittedString = IsColumnAutoGeneratedValueColumnContextHandler.START_CONTEXT_WORD + ColumnNameColumnContextHandler.TEMPLATE_TABLE_WORD + IsColumnAutoGeneratedValueColumnContextHandler.END_CONTEXT_WORD;
		String result = "";
		try {
			result = TemplateHandlerNew.HandleTableColumnTemplate(submittedString, _autoColumnDescriptionPOJO);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		String expectedResult = AUTO_COLUMN_NAME;
		Assert.assertEquals(expectedResult, result);
	}
	
	@Test
	public void Success_when_is_validated_when_primary_and_auto_is_specified_in_template()
	{
		String submittedString = IsColumnPrimaryKeyColumnContextHandler.START_CONTEXT_WORD +
				IsColumnAutoGeneratedValueColumnContextHandler.START_CONTEXT_WORD +
				ColumnNameColumnContextHandler.TEMPLATE_TABLE_WORD +
				IsColumnAutoGeneratedValueColumnContextHandler.END_CONTEXT_WORD +
				IsColumnPrimaryKeyColumnContextHandler.END_CONTEXT_WORD;
		boolean result= false;
		try{
			result =TemplateValidator.TemplateStringValidation(submittedString);
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		boolean expectedResult = true;
		Assert.assertEquals(expectedResult, result);
	}
	
	@Test 
	public void Success_when_output_for_auto_and_primary_column_when_primary_and_auto_is_specified_in_template()
	{
		String submittedString = IsColumnPrimaryKeyColumnContextHandler.START_CONTEXT_WORD +
				IsColumnAutoGeneratedValueColumnContextHandler.START_CONTEXT_WORD +
				ColumnNameColumnContextHandler.TEMPLATE_TABLE_WORD +
				IsColumnAutoGeneratedValueColumnContextHandler.END_CONTEXT_WORD +
				IsColumnPrimaryKeyColumnContextHandler.END_CONTEXT_WORD;
		String result = "";
		try{
			result =TemplateHandlerNew.HandleTableColumnTemplate(submittedString, _autoAndPrimaryColumnDescriptionPOJO);
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		String expectedResult = AUTO_AND_PRIMARY_COLUMN_NAME;
		Assert.assertEquals(expectedResult, result);
	}
	
	@Test 
	public void Success_when_output_for_auto_and_not_null_and_primary_column_when_not_null_and_primary_and_auto_is_specified_in_template()
	{
		String submittedString = 
				IsColumnNotNullValueColumnContextHandler.START_CONTEXT_WORD +
				IsColumnPrimaryKeyColumnContextHandler.START_CONTEXT_WORD +
				IsColumnAutoGeneratedValueColumnContextHandler.START_CONTEXT_WORD +
				ColumnNameColumnContextHandler.TEMPLATE_TABLE_WORD +
				IsColumnAutoGeneratedValueColumnContextHandler.END_CONTEXT_WORD +
				IsColumnPrimaryKeyColumnContextHandler.END_CONTEXT_WORD +
				IsColumnNotNullValueColumnContextHandler.END_CONTEXT_WORD;
		String result = "";
		try{
			result =TemplateHandlerNew.HandleTableColumnTemplate(submittedString, _autoAndNotNullAndPrimaryColumnDescriptionPOJO);
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		String expectedResult = AUTO_AND_NOT_NULL_AND_PRIMARY_COLUMN_NAME;
		Assert.assertEquals(expectedResult, result);
	}
	
	@Test
	public void Success_when_is_end_context_count_match_seven()
	{
		String submittedString = 
				IsColumnNotNullValueColumnContextHandler.START_CONTEXT_WORD +
				IsColumnPrimaryKeyColumnContextHandler.START_CONTEXT_WORD +
				IsColumnAutoGeneratedValueColumnContextHandler.START_CONTEXT_WORD +
				ColumnNameColumnContextHandler.TEMPLATE_TABLE_WORD +
				IsColumnAutoGeneratedValueColumnContextHandler.END_CONTEXT_WORD +
				IsColumnPrimaryKeyColumnContextHandler.END_CONTEXT_WORD +
				IsColumnNotNullValueColumnContextHandler.END_CONTEXT_WORD +
				" " +
				IsColumnPrimaryKeyColumnContextHandler.START_CONTEXT_WORD +
				IsColumnAutoGeneratedValueColumnContextHandler.START_CONTEXT_WORD +
				ColumnNameColumnContextHandler.TEMPLATE_TABLE_WORD +
				IsColumnAutoGeneratedValueColumnContextHandler.END_CONTEXT_WORD +
				IsColumnPrimaryKeyColumnContextHandler.END_CONTEXT_WORD ;
		int result= 0;
		try{
			result =TemplateContextHandlerPackageProvider.countEndContextWordInSubmittedString(submittedString);
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		int expectedResult = 7;
		Assert.assertEquals(expectedResult, result);
	}
	
	@Test
	public void Success_when_is_validated_when_auto_generated_and_primary_appended_with_auto_generated_is_specified_in_template()
	{
		String submittedString = 
				IsColumnNotNullValueColumnContextHandler.START_CONTEXT_WORD +
				IsColumnPrimaryKeyColumnContextHandler.START_CONTEXT_WORD +
				IsColumnAutoGeneratedValueColumnContextHandler.START_CONTEXT_WORD +
				ColumnNameColumnContextHandler.TEMPLATE_TABLE_WORD +
				IsColumnAutoGeneratedValueColumnContextHandler.END_CONTEXT_WORD +
				IsColumnPrimaryKeyColumnContextHandler.END_CONTEXT_WORD +
				IsColumnNotNullValueColumnContextHandler.END_CONTEXT_WORD +
				" " +
				IsColumnPrimaryKeyColumnContextHandler.START_CONTEXT_WORD +
				IsColumnAutoGeneratedValueColumnContextHandler.START_CONTEXT_WORD +
				ColumnNameColumnContextHandler.TEMPLATE_TABLE_WORD +
				IsColumnAutoGeneratedValueColumnContextHandler.END_CONTEXT_WORD +
				IsColumnPrimaryKeyColumnContextHandler.END_CONTEXT_WORD ;
		boolean result= false;
		try{
			result =TemplateValidator.TemplateStringValidation(submittedString);
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		boolean expectedResult = true;
		Assert.assertEquals(expectedResult, result);
	}
	
	@Test
	public void Success_when_output_is_two_auto_generated_and_primary_column_name_when_auto_generated_and_primary_appended_with_auto_generated_is_specified_in_template()
	{
		String submittedString = 
				IsColumnNotNullValueColumnContextHandler.START_CONTEXT_WORD +
				IsColumnPrimaryKeyColumnContextHandler.START_CONTEXT_WORD +
				IsColumnAutoGeneratedValueColumnContextHandler.START_CONTEXT_WORD +
				ColumnNameColumnContextHandler.TEMPLATE_TABLE_WORD +
				IsColumnAutoGeneratedValueColumnContextHandler.END_CONTEXT_WORD +
				IsColumnPrimaryKeyColumnContextHandler.END_CONTEXT_WORD +
				IsColumnNotNullValueColumnContextHandler.END_CONTEXT_WORD +
				" " +
				IsColumnPrimaryKeyColumnContextHandler.START_CONTEXT_WORD +
				IsColumnAutoGeneratedValueColumnContextHandler.START_CONTEXT_WORD +
				ColumnNameColumnContextHandler.TEMPLATE_TABLE_WORD +
				IsColumnAutoGeneratedValueColumnContextHandler.END_CONTEXT_WORD +
				IsColumnPrimaryKeyColumnContextHandler.END_CONTEXT_WORD ;
				
		String result = "";
		try{
			result =TemplateHandlerNew.HandleTableColumnTemplate(submittedString, _autoAndNotNullAndPrimaryColumnDescriptionPOJO);
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		String expectedResult = AUTO_AND_NOT_NULL_AND_PRIMARY_COLUMN_NAME + " " +AUTO_AND_NOT_NULL_AND_PRIMARY_COLUMN_NAME;
		Assert.assertEquals(expectedResult, result);
	}
	
	@Test
	public void Success_when_output_is_first_table_name_when_is_table_name_word_specified_in_template()
	{
		String submittedString = TableNameTableContextHandler.TEMPLATE_TABLE_WORD;
		String result = "";
		try {
			result = TemplateHandlerNew.HandleTableTemplate(submittedString, _firstTableDescriptionPOJO);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		String expectedResult = FIRST_TABLE_NAME;
		Assert.assertEquals(expectedResult, result);
	}
	
	@Test
	public void Success_when_output_is_first_table_all_column_name_when_is_table_foreach_column_name_specified_in_template()
	{
		String submittedString = ForEachColumnTableContextHandler.START_CONTEXT_WORD +
				ColumnNameColumnContextHandler.TEMPLATE_TABLE_WORD +"," +
				ForEachColumnTableContextHandler.END_CONTEXT_WORD;
		String result = "";
		try{
			result = TemplateHandlerNew.HandleTableTemplate(submittedString, _firstTableDescriptionPOJO);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		String expectedResult = PRIMARY_NOT_AUTO_COLUMN_NAME +"," + AUTO_COLUMN_NAME +",";
		Assert.assertEquals(expectedResult, result);
	}
	
	@Test
	public void Success_when_output_is_database_all_table_name_when_is_database_foreach_table_name_specified_in_template()
	{
		String submittedString = ForEachTableDatabaseContextHandler.START_CONTEXT_WORD +
				TableNameTableContextHandler.TEMPLATE_TABLE_WORD +"," +
				ForEachTableDatabaseContextHandler.END_CONTEXT_WORD;
		String result = "";
		try{
			result = TemplateHandlerNew.HandleTemplate(submittedString, _databaseDescriptionPojo, null, null);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		String expectedResult = FIRST_TABLE_NAME +"," + SECOND_TABLE_NAME +",";
		Assert.assertEquals(expectedResult, result);
	}
	
	@Test
	public void Success_when_output_is_Hello_when_hello_firt_character_to_upper_case_specified_in_template()
	{
		String submittedString = FirstLetterToUpperCaseFunctionTemplateHandler.START_CONTEXT_WORD 
				+ "hello" +
				FirstLetterToUpperCaseFunctionTemplateHandler.END_CONTEXT_WORD;
		String result = "";
		try{
			result = TemplateHandlerNew.HandleTemplate(submittedString, _databaseDescriptionPojo, null, null);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		String expectedResult = "Hello";
		Assert.assertEquals(expectedResult, result);
	}
	@Test
	public void Success_when_output_is_one_when_is_first_column_is_specified_and_column_index_in_template()
	{
		String submittedString = ForEachColumnTableContextHandler.START_CONTEXT_WORD +
				IsColumnAFirstColumnContextHandler.START_CONTEXT_WORD +
				"hello" +
				IsColumnAFirstColumnContextHandler.END_CONTEXT_WORD +
				ForEachColumnTableContextHandler.END_CONTEXT_WORD;
		String result = "";
		try{
			result = TemplateHandlerNew.HandleTableTemplate(submittedString,_firstTableDescriptionPOJO);
		}
		catch(Exception e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		String expectedResult = "hello";
		Assert.assertEquals(expectedResult, result);
	}
	
	@Test
	public void Success_when_output_is_one_when_is_last_column_is_specified_and_column_index_in_template()
	{
		String submittedString = ForEachColumnTableContextHandler.START_CONTEXT_WORD +
				IsColumnALastColumnContextHandler.START_CONTEXT_WORD +
				"hello" +
				IsColumnALastColumnContextHandler.END_CONTEXT_WORD +
				ForEachColumnTableContextHandler.END_CONTEXT_WORD;
		String result = "";
		try{
			result = TemplateHandlerNew.HandleTableTemplate(submittedString,_firstTableDescriptionPOJO);
		}
		catch(Exception e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		String expectedResult = "hello";
		Assert.assertEquals(expectedResult, result);
	}
}
