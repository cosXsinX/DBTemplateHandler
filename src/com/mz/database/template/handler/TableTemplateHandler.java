package com.mz.database.template.handler;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.regex.Pattern;

import org.apache.log4j.Logger;

import com.mz.database.configuration.manager.databaseTemplateEditorConfigurationManager;
import com.mz.database.descriptors.AbstractDatabaseDescriptor;
import com.mz.database.models.TableColumnDescriptionPOJO;
import com.mz.database.models.TableDescriptionPOJO;
import com.mz.database.template.semantic.TemplateSemanticReferenceClass;
import com.mz.utilities.FileManager;

public class TableTemplateHandler {

	private final static String COLUMN_PROPERTY_TYPE_KEY = "TYPE";
	private final static String COLUMN_PROPERTY_IS_PRIMARY_KEY_KEY = "PRIMARY";
	private final static String COLUMN_PROPERTY_IS_AUTOGENERATED_KEY= "AUTO";
	private final static String COLUMN_PROPERTY_IS_NOT_NULL_VALUE="NOT_NULL";
	private final static String COLUMN_PROPERTY_IS_FIRST_COLUMN = "IS_FIRST_COLUMN";
	private final static String COLUMN_PROPERTY_IS_LAST_COLUMN = "IS_LAST_COLUMN";
	
	private final static Logger LOGGER = Logger.getLogger(TableTemplateHandler.class);
	private String _tableNameStr;
	private List<String> _columnNameList;
	private Map<String,Properties> _columnNameIndexedColumnPropertiesMap;
	private AbstractDatabaseDescriptor _databaseDescriptor;
	
	
	private StringBuilder _templateStringBuilder = new StringBuilder();
	private BufferedReader _templateBufferedReader;
	
	
	public TableTemplateHandler(String TableNameStr, 
			List<String> ColumnNameList,Map<String,
			Properties> ColumnNameIndexedColumnPropertiesMap,
			AbstractDatabaseDescriptor databaseDescriptor)
	{
		_tableNameStr = TableNameStr;
		_columnNameList = ColumnNameList;
		_columnNameIndexedColumnPropertiesMap = ColumnNameIndexedColumnPropertiesMap;
		_databaseDescriptor = databaseDescriptor;
	}
	
	private boolean IsWellInitialized()
	{
		boolean result = true;
		result = result && (_tableNameStr != null);
		result = result && (_columnNameList != null);
		result = result && (_columnNameIndexedColumnPropertiesMap != null);
		result = result && (_databaseDescriptor != null);
		return result;
	}
	
	public File generateTableFileFromTemplateFile(File templateFile) throws IOException
	{
		if(!IsWellInitialized()) return null;
		if(templateFile == null) return null;
		String DestinationFileName = templateFile.getName();
		if(templateFile.getName().contains(TemplateSemanticReferenceClass.TEMPLATE_NAME_TABLE_NAME_WORD_IDENTIFIER))
		{
			DestinationFileName = templateFile.getName().replace(TemplateSemanticReferenceClass.TEMPLATE_NAME_TABLE_NAME_WORD_IDENTIFIER, _tableNameStr);
			if(DestinationFileName.endsWith
					(TemplateSemanticReferenceClass.TEMPLATE_FILE_NAME_EXTENSION)){
				DestinationFileName = DestinationFileName.substring(0,DestinationFileName.length()-TemplateSemanticReferenceClass.TEMPLATE_FILE_NAME_EXTENSION.length());
			}
		}
		String resultString = generateFileFromTemplateFile(templateFile);
		String resultFilePathStr = databaseTemplateEditorConfigurationManager.get_generatedFileFromTemplateDirectoryPathStr() + DestinationFileName;
		if(FileManager.DoesFileExists(resultFilePathStr)) FileManager.DeleteFile(resultFilePathStr);
		FileManager.CreateTextFile(resultFilePathStr, resultString);
		return new File(resultFilePathStr);
	}
	
	private String generateFileFromTemplateFile(File templateFile) throws IOException
	{
		
		String result = null;
		if(!IsWellInitialized()) return result;
		if(templateFile == null) return result;
		if(!templateFile.isFile()) return result;
		_templateBufferedReader = null;
		try {_templateBufferedReader = new BufferedReader( new FileReader(templateFile));}
		catch (FileNotFoundException e){ return null;}
		String currentLine;
		_templateStringBuilder = new StringBuilder();
		while((currentLine = _templateBufferedReader.readLine())!=null)
		{
			TreateCurrentTemplateLine(currentLine);
		}
		result = _templateStringBuilder.toString();
		return result;
	}
	
	public String generateOutputStringFromTemplateString(String templateString)
	{
		String result = null;
		if(!IsWellInitialized()) return result;
		if(templateString == null) return result;
		_templateBufferedReader = null;
		_templateBufferedReader = new BufferedReader( new StringReader(templateString));
		String currentLine;
		_templateStringBuilder = new StringBuilder();
		try {
			while((currentLine = _templateBufferedReader.readLine())!=null)
			{
				TreateCurrentTemplateLine(currentLine);
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		result = _templateStringBuilder.toString();
		return result;
	}
	
	
	private void TreateCurrentTemplateLine(String currentLine)
	{
		if(currentLine.contains(TemplateSemanticReferenceClass.TEMPLATE_TABLE_WORD)){
			currentLine = currentLine.replace(TemplateSemanticReferenceClass.TEMPLATE_TABLE_WORD, _tableNameStr);
		}
			
		if(currentLine.contains(TemplateSemanticReferenceClass.TEMPLATE_FOREACH_COLUMN_START_CONTEXT)){
			TreatForeachColumn(currentLine);
			return;
		}
		_templateStringBuilder.append(currentLine + "\n");
	}
	
	private boolean TreatForeachColumn(String ForeachStartContextLine)
	{
		List<String> foreachColumnContextRowList = new ArrayList<String>();
		String[] splittedForeachStartContextLine = 
				ForeachStartContextLine.
					split(Pattern.quote(TemplateSemanticReferenceClass.TEMPLATE_FOREACH_COLUMN_START_CONTEXT));
		if(splittedForeachStartContextLine.length>2)
		{
			LOGGER.error("Database Template handler cannot handle two nested foreach column");
			return false;
		}
		else if(splittedForeachStartContextLine.length==2)
		{
			_templateStringBuilder.append(splittedForeachStartContextLine[0]+"\n");
			foreachColumnContextRowList.add(splittedForeachStartContextLine[1]);
		}
		else if(splittedForeachStartContextLine.length==1){
			if(ForeachStartContextLine.endsWith(TemplateSemanticReferenceClass.TEMPLATE_FOREACH_COLUMN_START_CONTEXT))
			{
				_templateStringBuilder.append(splittedForeachStartContextLine[0]+"\n");
			}else if(ForeachStartContextLine.startsWith(TemplateSemanticReferenceClass.TEMPLATE_FOREACH_COLUMN_START_CONTEXT))
			{
				foreachColumnContextRowList.add(splittedForeachStartContextLine[0]);
			}
			else return false;
		}
		else return false;
		
		//Loading foreach Column row list context in devoted list
		String rowEndContextAfterContextContentStr = null;
		String currentLine;
		try {
			while((currentLine = _templateBufferedReader.readLine())!=null)
			{
				if(currentLine.contains(TemplateSemanticReferenceClass.TEMPLATE_FOREACH_COLUMN_END_CONTEXT)){
					String[] splittedForeachEndcContextLine = currentLine.split(Pattern.quote(TemplateSemanticReferenceClass.TEMPLATE_FOREACH_COLUMN_END_CONTEXT));
					if(splittedForeachEndcContextLine.length>2)
					{
						LOGGER.error("Database Template handler cannot handle two nested foreach column");
						return false;
					}
					else if(splittedForeachEndcContextLine.length==2)
					{
						foreachColumnContextRowList.add(splittedForeachEndcContextLine[0]);
						rowEndContextAfterContextContentStr = splittedForeachEndcContextLine[1];
					}
					else if(splittedForeachStartContextLine.length==1){
						if(ForeachStartContextLine.endsWith(TemplateSemanticReferenceClass.TEMPLATE_FOREACH_COLUMN_START_CONTEXT))
						{
							_templateStringBuilder.append(splittedForeachEndcContextLine[0]+"\n");
						}else if(ForeachStartContextLine.startsWith(TemplateSemanticReferenceClass.TEMPLATE_FOREACH_COLUMN_START_CONTEXT))
						{
							foreachColumnContextRowList.add(splittedForeachEndcContextLine[0]);
						}
						else return false;
					}
					else return false;
					break;
				}
				foreachColumnContextRowList.add(currentLine);
			}
		} catch (IOException e) {
			return false;
		}
		
		//Foreach column context repetition
		int currentColumnIndexInt;
		String currentColumnNameStr;
		for(currentColumnIndexInt = 0 ;currentColumnIndexInt<_columnNameList.size(); currentColumnIndexInt++){
			currentColumnNameStr = _columnNameList.get(currentColumnIndexInt);
			int currentForeachColumnRowIndex;
			String currentForeachColumnRowString;
			for(currentForeachColumnRowIndex = 0; currentForeachColumnRowIndex < foreachColumnContextRowList.size(); currentForeachColumnRowIndex++ )
			{
				currentForeachColumnRowString = foreachColumnContextRowList.get(currentForeachColumnRowIndex);
				String treatedRowStr = currentForeachColumnRowString.replace(TemplateSemanticReferenceClass.TEMPLATE_FOREACH_CURRENT_COLUMN_WORD, currentColumnNameStr)+"\n";
				treatedRowStr = treatedRowStr.replace(TemplateSemanticReferenceClass.TEMPLATE_FOREACH_CURRENT_INDEX_COLUMN_WORD, String.valueOf(currentColumnIndexInt));
				
				// Primary key column property treatment
				treatedRowStr = TreatForeachCurrentColumnIfIsPrimaryKeyContext(currentColumnNameStr,treatedRowStr);
				treatedRowStr = TreatForeachCurrentColumnIfIsNotPrimaryKeyContext(currentColumnNameStr, treatedRowStr);
				treatedRowStr = TreatForeachCurrentColumnIfIsAutogeneratedValueContext(currentColumnNameStr, treatedRowStr);
				treatedRowStr = TreatForeachCurrentColumnIfIsNotAutogeneratedValueContext1(currentColumnNameStr, treatedRowStr);
				treatedRowStr = TreatForeachCurrentColumnIfIsNotNullValueContext(currentColumnNameStr,treatedRowStr);
				treatedRowStr = TreatForeachCurrentColumnIfIsFirstColumnContext(currentColumnNameStr,treatedRowStr);
				treatedRowStr = TreatForeachCurrentColumnIfIsNotFirstColumnContext(currentColumnNameStr, treatedRowStr);
				treatedRowStr = TreatForeachCurrentColumnIfIsLastColumnContext(currentColumnNameStr,treatedRowStr);
				treatedRowStr = TreatForeachCurrentColumnIfIsNotLastColumnContext(currentColumnNameStr,treatedRowStr);
				
				//Table name replacement
				treatedRowStr = treatedRowStr.replace(TemplateSemanticReferenceClass.TEMPLATE_TABLE_WORD, _tableNameStr);
				
				if(_columnNameIndexedColumnPropertiesMap.containsKey(currentColumnNameStr))
				{
					Properties currentColumnProperties = _columnNameIndexedColumnPropertiesMap.get(currentColumnNameStr);
					if(currentColumnProperties.containsKey(COLUMN_PROPERTY_TYPE_KEY))
					{
						String currentColumnTypeStr = currentColumnProperties.getProperty(COLUMN_PROPERTY_TYPE_KEY);
						treatedRowStr = treatedRowStr.replace(TemplateSemanticReferenceClass.
								TEMPLATE_FOREACH_CURRENT_COLUMN_TYPE_WORD,currentColumnTypeStr);
						treatedRowStr = ReplaceConvertedTypeStringInString(treatedRowStr, currentColumnTypeStr, _databaseDescriptor);
					}
				}
				if(treatedRowStr != null) _templateStringBuilder.append(treatedRowStr);
				
			}
		}
		if(rowEndContextAfterContextContentStr!=null)_templateStringBuilder.append(rowEndContextAfterContextContentStr);
		return true;
	}
	
	//TODO Unit test this code
	private boolean _isInForeachCurrentColumnIfIsPrimaryKeyContext = false;
	private String TreatForeachCurrentColumnIfIsPrimaryKeyContext(String CurrentColumnName, String TreatedRowStr)
	{
		int StartContextWordLengthInt = TemplateSemanticReferenceClass.
				TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_PRIMARY_KEY_START_CONTEXT.length();
		int EndContextWordLengthInt = TemplateSemanticReferenceClass.
				TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_PRIMARY_KEY_END_CONTEXT.length();
		
		boolean isColumnAPrimaryKey = IsColumnAPrimaryKeyColumn(CurrentColumnName);
		String result = TreatedRowStr;
		
		int StartContextWordIndex = TreatedRowStr.indexOf(TemplateSemanticReferenceClass.
				TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_PRIMARY_KEY_START_CONTEXT);
		int EndContextWordIndex = TreatedRowStr.indexOf(TemplateSemanticReferenceClass.
				TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_PRIMARY_KEY_END_CONTEXT);
		
		if(_isInForeachCurrentColumnIfIsPrimaryKeyContext)
		{
			if(EndContextWordIndex<0)
			{
				result = (isColumnAPrimaryKey?result:"");
			}else
			{
				if(isColumnAPrimaryKey){
					result = result.substring(0,EndContextWordIndex) +
							result.substring(EndContextWordIndex+ EndContextWordLengthInt, TreatedRowStr.length());
				}
				else{
					result = result.substring(EndContextWordIndex+ EndContextWordLengthInt, TreatedRowStr.length());
				}
				_isInForeachCurrentColumnIfIsPrimaryKeyContext = false;
			}
		}else{
			
			if(StartContextWordIndex<0) return result;
			if(EndContextWordIndex<0)
			{	
				if(isColumnAPrimaryKey)
				{
					result = result.substring(0,StartContextWordIndex-1) +
							result.substring(StartContextWordIndex + StartContextWordLengthInt,TreatedRowStr.length()) ;
				}
				else
				{
					result = result.substring(0,StartContextWordIndex-1) ;
				}
				_isInForeachCurrentColumnIfIsPrimaryKeyContext = true;
			}else
			{
				if(isColumnAPrimaryKey)
				{
					result = result.substring(0,StartContextWordIndex-1) +
							result.substring(StartContextWordIndex + StartContextWordLengthInt,EndContextWordIndex) +
								result.substring(EndContextWordIndex+ EndContextWordLengthInt, TreatedRowStr.length());
				}
				else
				{
					result = result.substring(0,StartContextWordIndex-1) +
							result.substring(EndContextWordIndex+ EndContextWordLengthInt, TreatedRowStr.length());
				}
				_isInForeachCurrentColumnIfIsPrimaryKeyContext = false;
			}
		}
		return result;
	}
	
	//TODO Unit test this code
	private boolean _isInForeachCurrentColumnIfIsNotPrimaryKeyContext = false;
	private String TreatForeachCurrentColumnIfIsNotPrimaryKeyContext(String CurrentColumnName, String TreatedRowStr)
	{
		int StartContextWordLengthInt = TemplateSemanticReferenceClass.
				TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_NOT_PRIMARY_KEY_START_CONTEXT.length();
		int EndContextWordLengthInt = TemplateSemanticReferenceClass.
				TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_NOT_PRIMARY_KEY_END_CONTEXT.length();
		
		boolean isColumnAPrimaryKey = IsColumnAPrimaryKeyColumn(CurrentColumnName);
		String result = TreatedRowStr;
		
		int StartContextWordIndex = TreatedRowStr.indexOf(TemplateSemanticReferenceClass.
				TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_NOT_PRIMARY_KEY_START_CONTEXT);
		int EndContextWordIndex = TreatedRowStr.indexOf(TemplateSemanticReferenceClass.
				TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_NOT_PRIMARY_KEY_END_CONTEXT);
		
		if(_isInForeachCurrentColumnIfIsNotPrimaryKeyContext)
		{
			if(EndContextWordIndex<0)
			{
				result = (isColumnAPrimaryKey?"":result);
			}else
			{
				if(isColumnAPrimaryKey){
					result = result.substring(EndContextWordIndex+ EndContextWordLengthInt, TreatedRowStr.length());
				}
				else{
							result = result.substring(0,EndContextWordIndex) +
								result.substring(EndContextWordIndex+ EndContextWordLengthInt, TreatedRowStr.length());
				}
				_isInForeachCurrentColumnIfIsNotPrimaryKeyContext = false;
			}
		}else{
			
			if(StartContextWordIndex<0) return result;
			if(EndContextWordIndex<0)
			{	
				if(isColumnAPrimaryKey)
				{
					result = result.substring(0,StartContextWordIndex-1) ;
				}
				else
				{
					result = result.substring(0,StartContextWordIndex-1) +
							result.substring(StartContextWordIndex + StartContextWordLengthInt,TreatedRowStr.length()) ;
				}
				_isInForeachCurrentColumnIfIsNotPrimaryKeyContext = true;
			}else
			{
				if(isColumnAPrimaryKey)
				{
					result = result.substring(0,StartContextWordIndex-1) +
								result.substring(EndContextWordIndex+ EndContextWordLengthInt, TreatedRowStr.length());
				}
				else
				{
					result = result.substring(0,StartContextWordIndex-1) +
							result.substring(StartContextWordIndex + StartContextWordLengthInt,EndContextWordIndex) +
								result.substring(EndContextWordIndex+ EndContextWordLengthInt, TreatedRowStr.length());
				}
				_isInForeachCurrentColumnIfIsNotPrimaryKeyContext = false;
			}
		}
		return result;
	}
	
	
	//TODO Unit test this code
	private boolean _isInForeachCurrentColumnIfIsAutogeneratedValueContext = false;
	private String TreatForeachCurrentColumnIfIsAutogeneratedValueContext(String CurrentColumnName, String TreatedRowStr)
	{
		int StartContextWordLengthInt = TemplateSemanticReferenceClass.
				TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_AUTOGENERATED_KEY_START_CONTEXT.length();
		int EndContextWordLengthInt = TemplateSemanticReferenceClass.
				TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_AUTOGENERATED_KEY_END_CONTEXT.length();
		
		boolean isColumnAAutogenerated = IsColumnAAutogeneratedValueColumn(CurrentColumnName);
		String result = TreatedRowStr;
		
		int StartContextWordIndex = TreatedRowStr.indexOf(TemplateSemanticReferenceClass.
				TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_AUTOGENERATED_KEY_START_CONTEXT);
		int EndContextWordIndex = TreatedRowStr.indexOf(TemplateSemanticReferenceClass.
				TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_AUTOGENERATED_KEY_END_CONTEXT);
		
		if(_isInForeachCurrentColumnIfIsAutogeneratedValueContext)
		{
			if(EndContextWordIndex<0)
			{
				result = (isColumnAAutogenerated?result:"");
			}else
			{
				if(isColumnAAutogenerated){
					result = result.substring(0,EndContextWordIndex) +
							result.substring(EndContextWordIndex+ EndContextWordLengthInt, TreatedRowStr.length());
				}
				else{
					result = result.substring(EndContextWordIndex+ EndContextWordLengthInt, TreatedRowStr.length());
				}
				_isInForeachCurrentColumnIfIsAutogeneratedValueContext = false;
			}
		}else{
			
			if(StartContextWordIndex<0) return result;
			if(EndContextWordIndex<0)
			{	
				if(isColumnAAutogenerated)
				{
					result = result.substring(0,StartContextWordIndex-1) +
							result.substring(StartContextWordIndex + StartContextWordLengthInt,TreatedRowStr.length()) ;
				}
				else
				{
					result = result.substring(0,StartContextWordIndex-1) ;
				}
				_isInForeachCurrentColumnIfIsAutogeneratedValueContext = true;
			}else
			{
				if(isColumnAAutogenerated)
				{
					result = result.substring(0,StartContextWordIndex-1) +
							result.substring(StartContextWordIndex + StartContextWordLengthInt,EndContextWordIndex) +
								result.substring(EndContextWordIndex+ EndContextWordLengthInt, TreatedRowStr.length());
				}
				else
				{
					result = result.substring(0,StartContextWordIndex-1) +
							result.substring(EndContextWordIndex+ EndContextWordLengthInt, TreatedRowStr.length());
				}
				_isInForeachCurrentColumnIfIsAutogeneratedValueContext = false;
			}
		}
		return result;
	}
	
	//TODO Unit test this code
	private boolean _isInForeachCurrentColumnIfIsNotAutogeneratedValueContext1 = false;
	private String TreatForeachCurrentColumnIfIsNotAutogeneratedValueContext1(String CurrentColumnName, String TreatedRowStr)
	{
		int StartContextWordLengthInt = TemplateSemanticReferenceClass.
				TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_NOT_AUTOGENERATED_KEY_START_CONTEXT.length();
		int EndContextWordLengthInt = TemplateSemanticReferenceClass.
				TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_NOT_AUTOGENERATED_KEY_END_CONTEXT.length();
		
		boolean isColumnAPrimaryKey = IsColumnAAutogeneratedValueColumn(CurrentColumnName);
		String result = TreatedRowStr;
		
		int StartContextWordIndex = TreatedRowStr.indexOf(TemplateSemanticReferenceClass.
				TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_NOT_AUTOGENERATED_KEY_START_CONTEXT);
		int EndContextWordIndex = TreatedRowStr.indexOf(TemplateSemanticReferenceClass.
				TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_NOT_AUTOGENERATED_KEY_END_CONTEXT);
		
		if(_isInForeachCurrentColumnIfIsNotAutogeneratedValueContext1)
		{
			if(EndContextWordIndex<0)
			{
				result = (isColumnAPrimaryKey?"":result);
			}else
			{
				if(isColumnAPrimaryKey){
					result = result.substring(EndContextWordIndex+ EndContextWordLengthInt, TreatedRowStr.length());
				}
				else{
							result = result.substring(0,EndContextWordIndex) +
								result.substring(EndContextWordIndex+ EndContextWordLengthInt, TreatedRowStr.length());
				}
				_isInForeachCurrentColumnIfIsNotAutogeneratedValueContext1 = false;
			}
		}else{
			
			if(StartContextWordIndex<0) return result;
			if(EndContextWordIndex<0)
			{	
				if(isColumnAPrimaryKey)
				{
					result = result.substring(0,StartContextWordIndex-1) ;
				}
				else
				{
					result = result.substring(0,StartContextWordIndex-1) +
							result.substring(StartContextWordIndex + StartContextWordLengthInt,TreatedRowStr.length()) ;
				}
				_isInForeachCurrentColumnIfIsNotAutogeneratedValueContext1 = true;
			}else
			{
				if(isColumnAPrimaryKey)
				{
					result = result.substring(0,StartContextWordIndex-1) +
								result.substring(EndContextWordIndex+ EndContextWordLengthInt, TreatedRowStr.length());
				}
				else
				{
					result = result.substring(0,StartContextWordIndex-1) +
							result.substring(StartContextWordIndex + StartContextWordLengthInt,EndContextWordIndex) +
								result.substring(EndContextWordIndex+ EndContextWordLengthInt, TreatedRowStr.length());
				}
				_isInForeachCurrentColumnIfIsNotAutogeneratedValueContext1 = false;
			}
		}
		return result;
	}
	
	
	//TODO Unit test this code
	private boolean _isInForeachCurrentColumnIfIsNotNullValueContext = false;
	private String TreatForeachCurrentColumnIfIsNotNullValueContext(String CurrentColumnName, String TreatedRowStr)
	{
		int StartContextWordLengthInt = TemplateSemanticReferenceClass.
				TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_NOT_NULL_VALUE_START_CONTEXT.length();
		int EndContextWordLengthInt = TemplateSemanticReferenceClass.
				TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_NOT_NULL_VALUE_END_CONTEXT.length();
		
		boolean isColumnANotNullValue = IsColumnANotNullValueColumn(CurrentColumnName);
		String result = TreatedRowStr;
		
		int StartContextWordIndex = TreatedRowStr.indexOf(TemplateSemanticReferenceClass.
				TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_NOT_NULL_VALUE_START_CONTEXT);
		int EndContextWordIndex = TreatedRowStr.indexOf(TemplateSemanticReferenceClass.
				TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_NOT_NULL_VALUE_END_CONTEXT);
		
		if(_isInForeachCurrentColumnIfIsNotNullValueContext)
		{
			if(EndContextWordIndex<0)
			{
				result = (isColumnANotNullValue?result:"");
			}else
			{
				if(isColumnANotNullValue){
					result = result.substring(0,EndContextWordIndex) +
							result.substring(EndContextWordIndex+ EndContextWordLengthInt, TreatedRowStr.length());
				}
				else{
					result = result.substring(EndContextWordIndex+ EndContextWordLengthInt, TreatedRowStr.length());
				}
				_isInForeachCurrentColumnIfIsNotNullValueContext = false;
			}
		}else{
			
			if(StartContextWordIndex<0) return result;
			if(EndContextWordIndex<0)
			{	
				if(isColumnANotNullValue)
				{
					result = result.substring(0,StartContextWordIndex-1) +
							result.substring(StartContextWordIndex + StartContextWordLengthInt,TreatedRowStr.length()) ;
				}
				else
				{
					result = result.substring(0,StartContextWordIndex-1) ;
				}
				_isInForeachCurrentColumnIfIsNotNullValueContext = true;
			}else
			{
				if(isColumnANotNullValue)
				{
					result = result.substring(0,StartContextWordIndex-1) +
							result.substring(StartContextWordIndex + StartContextWordLengthInt,EndContextWordIndex) +
								result.substring(EndContextWordIndex+ EndContextWordLengthInt, TreatedRowStr.length());
				}
				else
				{
					result = result.substring(0,StartContextWordIndex-1) +
							result.substring(EndContextWordIndex+ EndContextWordLengthInt, TreatedRowStr.length());
				}
				_isInForeachCurrentColumnIfIsNotNullValueContext = false;
			}
		}
		return result;
	}
	
	//TODO Unit test this code
	private boolean _isInForeachCurrentColumnIfIsFirstColumnContext = false;
	private String TreatForeachCurrentColumnIfIsFirstColumnContext(String CurrentColumnName, String TreatedRowStr)
	{
		int StartContextWordLengthInt = TemplateSemanticReferenceClass.
				TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_FIRST_COLUMN_START_CONTEXT.length();
		int EndContextWordLengthInt = TemplateSemanticReferenceClass.
				TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_FIRST_COLUMN_END_CONTEXT.length();
		
		boolean isColumnAFirstColumn = IsColumnAFirstColumn(CurrentColumnName);
		String result = TreatedRowStr;
		
		int StartContextWordIndex = TreatedRowStr.indexOf(TemplateSemanticReferenceClass.
				TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_FIRST_COLUMN_START_CONTEXT);
		int EndContextWordIndex = TreatedRowStr.indexOf(TemplateSemanticReferenceClass.
				TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_FIRST_COLUMN_END_CONTEXT);
		
		if(_isInForeachCurrentColumnIfIsFirstColumnContext)
		{
			if(EndContextWordIndex<0)
			{
				result = (isColumnAFirstColumn?result:"");
			}else
			{
				if(isColumnAFirstColumn){
					result = result.substring(0,EndContextWordIndex) +
							result.substring(EndContextWordIndex+ EndContextWordLengthInt, TreatedRowStr.length());
				}
				else{
					result = result.substring(EndContextWordIndex+ EndContextWordLengthInt, TreatedRowStr.length());
				}
				_isInForeachCurrentColumnIfIsFirstColumnContext = false;
			}
		}else{
			
			if(StartContextWordIndex<0) return result;
			if(EndContextWordIndex<0)
			{	
				if(isColumnAFirstColumn)
				{
					result = result.substring(0,StartContextWordIndex-1) +
							result.substring(StartContextWordIndex + StartContextWordLengthInt,TreatedRowStr.length()) ;
				}
				else
				{
					result = result.substring(0,StartContextWordIndex-1) ;
				}
				_isInForeachCurrentColumnIfIsFirstColumnContext = true;
			}else
			{
				if(isColumnAFirstColumn)
				{
					result = result.substring(0,StartContextWordIndex-1) +
							result.substring(StartContextWordIndex + StartContextWordLengthInt,EndContextWordIndex) +
								result.substring(EndContextWordIndex+ EndContextWordLengthInt, TreatedRowStr.length());
				}
				else
				{
					result = result.substring(0,StartContextWordIndex-1) +
							result.substring(EndContextWordIndex+ EndContextWordLengthInt, TreatedRowStr.length());
				}
				_isInForeachCurrentColumnIfIsFirstColumnContext = false;
			}
		}
		return result;
	}
		
	//TODO Unit test this code
	private boolean _isInForeachCurrentColumnIfIsNotFirstColumnContext = false;
	private String TreatForeachCurrentColumnIfIsNotFirstColumnContext(String CurrentColumnName, String TreatedRowStr)
	{
		int StartContextWordLengthInt = TemplateSemanticReferenceClass.
				TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_NOT_FIRST_COLUMN_START_CONTEXT.length();
		int EndContextWordLengthInt = TemplateSemanticReferenceClass.
				TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_NOT_FIRST_COLUMN_END_CONTEXT.length();
		
		boolean isColumnAFirstColumn = IsColumnAFirstColumn(CurrentColumnName);
		String result = TreatedRowStr;
		
		int StartContextWordIndex = TreatedRowStr.indexOf(TemplateSemanticReferenceClass.
				TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_NOT_FIRST_COLUMN_START_CONTEXT);
		int EndContextWordIndex = TreatedRowStr.indexOf(TemplateSemanticReferenceClass.
				TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_NOT_FIRST_COLUMN_END_CONTEXT);
		
		if(_isInForeachCurrentColumnIfIsNotFirstColumnContext)
		{
			if(EndContextWordIndex<0)
			{
				result = (isColumnAFirstColumn?"":result);
			}else
			{
				if(isColumnAFirstColumn){
					result = result.substring(EndContextWordIndex+ EndContextWordLengthInt, TreatedRowStr.length());
				}
				else{
							result = result.substring(0,EndContextWordIndex) +
								result.substring(EndContextWordIndex+ EndContextWordLengthInt, TreatedRowStr.length());
				}
				_isInForeachCurrentColumnIfIsNotFirstColumnContext = false;
			}
		}else{
			
			if(StartContextWordIndex<0) return result;
			if(EndContextWordIndex<0)
			{	
				if(isColumnAFirstColumn)
				{
					result = result.substring(0,StartContextWordIndex-1) ;
				}
				else
				{
					result = result.substring(0,StartContextWordIndex-1) +
							result.substring(StartContextWordIndex + StartContextWordLengthInt,TreatedRowStr.length()) ;
				}
				_isInForeachCurrentColumnIfIsNotFirstColumnContext = true;
			}else
			{
				if(isColumnAFirstColumn)
				{
					result = result.substring(0,StartContextWordIndex-1) +
								result.substring(EndContextWordIndex+ EndContextWordLengthInt, TreatedRowStr.length());
				}
				else
				{
					result = result.substring(0,StartContextWordIndex-1) +
							result.substring(StartContextWordIndex + StartContextWordLengthInt,EndContextWordIndex) +
								result.substring(EndContextWordIndex+ EndContextWordLengthInt, TreatedRowStr.length());
				}
				_isInForeachCurrentColumnIfIsNotFirstColumnContext = false;
			}
		}
		return result;
	}
	
	//TODO Unit test this code
	private boolean _isInForeachCurrentColumnIfIsLastColumnContext = false;
	private String TreatForeachCurrentColumnIfIsLastColumnContext(String CurrentColumnName, String TreatedRowStr)
	{
		int StartContextWordLengthInt = TemplateSemanticReferenceClass.
				TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_LAST_COLUMN_START_CONTEXT.length();
		int EndContextWordLengthInt = TemplateSemanticReferenceClass.
				TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_LAST_COLUMN_END_CONTEXT.length();
		
		boolean isColumnALastColumn = IsColumnALastColumn(CurrentColumnName);
		String result = TreatedRowStr;
		
		int StartContextWordIndex = TreatedRowStr.indexOf(TemplateSemanticReferenceClass.
				TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_LAST_COLUMN_START_CONTEXT);
		int EndContextWordIndex = TreatedRowStr.indexOf(TemplateSemanticReferenceClass.
				TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_LAST_COLUMN_END_CONTEXT);
		
		if(_isInForeachCurrentColumnIfIsLastColumnContext)
		{
			if(EndContextWordIndex<0)
			{
				result = (isColumnALastColumn?result:"");
			}else
			{
				if(isColumnALastColumn){
					result = result.substring(0,EndContextWordIndex) +
							result.substring(EndContextWordIndex+ EndContextWordLengthInt, TreatedRowStr.length());
				}
				else{
					result = result.substring(EndContextWordIndex+ EndContextWordLengthInt, TreatedRowStr.length());
				}
				_isInForeachCurrentColumnIfIsLastColumnContext = false;
			}
		}else{
			
			if(StartContextWordIndex<0) return result;
			if(EndContextWordIndex<0)
			{	
				if(isColumnALastColumn)
				{
					result = result.substring(0,StartContextWordIndex-1) +
							result.substring(StartContextWordIndex + StartContextWordLengthInt,TreatedRowStr.length()) ;
				}
				else
				{
					result = result.substring(0,StartContextWordIndex-1) ;
				}
				_isInForeachCurrentColumnIfIsLastColumnContext = true;
			}else
			{
				if(isColumnALastColumn)
				{
					result = result.substring(0,StartContextWordIndex-1) +
							result.substring(StartContextWordIndex + StartContextWordLengthInt,EndContextWordIndex) +
								result.substring(EndContextWordIndex+ EndContextWordLengthInt, TreatedRowStr.length());
				}
				else
				{
					result = result.substring(0,StartContextWordIndex-1) +
							result.substring(EndContextWordIndex+ EndContextWordLengthInt, TreatedRowStr.length());
				}
				_isInForeachCurrentColumnIfIsLastColumnContext = false;
			}
		}
		return result;
	}
		
	//TODO Unit test this code
	private boolean _isInForeachCurrentColumnIfIsNotLastColumnContext = false;
	private String TreatForeachCurrentColumnIfIsNotLastColumnContext(String CurrentColumnName, String TreatedRowStr)
	{
		int StartContextWordLengthInt = TemplateSemanticReferenceClass.
				TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_NOT_LAST_COLUMN_START_CONTEXT.length();
		int EndContextWordLengthInt = TemplateSemanticReferenceClass.
				TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_NOT_LAST_COLUMN_END_CONTEXT.length();
		
		boolean isColumnALastColumn = IsColumnALastColumn(CurrentColumnName);
		String result = TreatedRowStr;
		
		int StartContextWordIndex = TreatedRowStr.indexOf(TemplateSemanticReferenceClass.
				TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_NOT_LAST_COLUMN_START_CONTEXT);
		int EndContextWordIndex = TreatedRowStr.indexOf(TemplateSemanticReferenceClass.
				TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_NOT_LAST_COLUMN_END_CONTEXT);
		
		if(_isInForeachCurrentColumnIfIsNotLastColumnContext)
		{
			if(EndContextWordIndex<0)
			{
				result = (isColumnALastColumn?"":result);
			}else
			{
				if(isColumnALastColumn){
					result = result.substring(EndContextWordIndex+ EndContextWordLengthInt, TreatedRowStr.length());
				}
				else{
							result = result.substring(0,EndContextWordIndex) +
								result.substring(EndContextWordIndex+ EndContextWordLengthInt, TreatedRowStr.length());
				}
				_isInForeachCurrentColumnIfIsNotLastColumnContext = false;
			}
		}else{
			
			if(StartContextWordIndex<0) return result;
			if(EndContextWordIndex<0)
			{	
				if(isColumnALastColumn)
				{
					result = result.substring(0,StartContextWordIndex-1) ;
				}
				else
				{
					result = result.substring(0,StartContextWordIndex-1) +
							result.substring(StartContextWordIndex + StartContextWordLengthInt,TreatedRowStr.length()) ;
				}
				_isInForeachCurrentColumnIfIsNotLastColumnContext = true;
			}else
			{
				if(isColumnALastColumn)
				{
					result = result.substring(0,StartContextWordIndex-1) +
								result.substring(EndContextWordIndex+ EndContextWordLengthInt, TreatedRowStr.length());
				}
				else
				{
					result = result.substring(0,StartContextWordIndex-1) +
							result.substring(StartContextWordIndex + StartContextWordLengthInt,EndContextWordIndex) +
								result.substring(EndContextWordIndex+ EndContextWordLengthInt, TreatedRowStr.length());
				}
				_isInForeachCurrentColumnIfIsNotLastColumnContext = false;
			}
		}
		return result;
	}
	
	private String ReplaceConvertedTypeStringInString(String SubmittedString,String submittedType,AbstractDatabaseDescriptor descriptor)
	{
		if(!IsWellInitialized()) return null;
		if(SubmittedString == null) return null;
		if(submittedType == null) return SubmittedString;
		if(!SubmittedString.contains(TemplateSemanticReferenceClass.TEMPLATE_FOREACH_CURRENT_COLUMN_TYPE_CONVERT_START_CONTEXT)) return SubmittedString;
		
		while(SubmittedString.contains(TemplateSemanticReferenceClass.TEMPLATE_FOREACH_CURRENT_COLUMN_TYPE_CONVERT_START_CONTEXT)
				&& SubmittedString.contains(TemplateSemanticReferenceClass.TEMPLATE_FOREACH_CURRENT_COLUMN_TYPE_CONVERT_END_CONTEXT)){
			int WordStartIndex = SubmittedString.
				indexOf(TemplateSemanticReferenceClass.TEMPLATE_FOREACH_CURRENT_COLUMN_TYPE_CONVERT_START_CONTEXT);
			int WordEndIndex = SubmittedString.indexOf(TemplateSemanticReferenceClass.TEMPLATE_FOREACH_CURRENT_COLUMN_TYPE_CONVERT_END_CONTEXT);
			
			String ReplacedWord = SubmittedString.substring(WordStartIndex,WordEndIndex+TemplateSemanticReferenceClass.TEMPLATE_FOREACH_CURRENT_COLUMN_TYPE_CONVERT_END_CONTEXT.length());
			String DestinationEnvironment = ReplacedWord.substring(TemplateSemanticReferenceClass.TEMPLATE_FOREACH_CURRENT_COLUMN_TYPE_CONVERT_START_CONTEXT.length());
			DestinationEnvironment = DestinationEnvironment.substring(0,DestinationEnvironment.indexOf(TemplateSemanticReferenceClass.TEMPLATE_FOREACH_CURRENT_COLUMN_TYPE_CONVERT_END_CONTEXT));
			String convertedType = descriptor.ConvertType(submittedType, DestinationEnvironment);
			SubmittedString = SubmittedString.replace(ReplacedWord, convertedType);
		}
		return SubmittedString;
	}
	
	public static TableTemplateHandler TableDescriptionPOJOToTableTemplateHandler(TableDescriptionPOJO tableDescriptionPOJO,AbstractDatabaseDescriptor databaseDescriptor){
		if(tableDescriptionPOJO == null) return null;
		List<TableColumnDescriptionPOJO> columnPOJOList = tableDescriptionPOJO.get_ColumnsList();
		List<String> ColumnNameList = new ArrayList<String>();
		HashMap<String,Properties> ColumnNameIndexedColumnPropertiesMap = new HashMap<String, Properties>();
		if(!(columnPOJOList == null))
		{
			int currentIndex;
			TableColumnDescriptionPOJO currentColumn;
			for(currentIndex= 0; currentIndex< columnPOJOList.size(); currentIndex ++){
				currentColumn = columnPOJOList.get(currentIndex);
				ColumnNameList.add(currentColumn.get_NameStr());
				Properties currentProperties = new Properties();
				currentProperties.setProperty(COLUMN_PROPERTY_TYPE_KEY, currentColumn.get_TypeStr());
				currentProperties.setProperty(COLUMN_PROPERTY_IS_PRIMARY_KEY_KEY, String.valueOf(currentColumn.is_PrimaryKey()));
				currentProperties.setProperty(COLUMN_PROPERTY_IS_AUTOGENERATED_KEY, String.valueOf(currentColumn.is_AutoGeneratedValueBln()));
				currentProperties.setProperty(COLUMN_PROPERTY_IS_NOT_NULL_VALUE, String.valueOf(currentColumn.is_NotNull()));
				currentProperties.setProperty(COLUMN_PROPERTY_IS_FIRST_COLUMN, String.valueOf((currentIndex==0)));
				currentProperties.setProperty(COLUMN_PROPERTY_IS_LAST_COLUMN, String.valueOf((currentIndex == (columnPOJOList.size()-1))));
				ColumnNameIndexedColumnPropertiesMap.put(currentColumn.get_NameStr(), currentProperties);
			}
		}
		
		TableTemplateHandler templateHandler = 
				new TableTemplateHandler(tableDescriptionPOJO.get_NameStr(),
						ColumnNameList, ColumnNameIndexedColumnPropertiesMap,databaseDescriptor);
		return templateHandler;
	}
	
	//Column properties retrieval
	private boolean IsColumnAPrimaryKeyColumn(String ColumnName)
	{
		boolean result = false;
		if(ColumnName == null) return result;
		if(!_columnNameIndexedColumnPropertiesMap.containsKey(ColumnName)) return result;
		Properties currentColumnProperties = _columnNameIndexedColumnPropertiesMap.get(ColumnName);
		if(!currentColumnProperties.containsKey(COLUMN_PROPERTY_IS_PRIMARY_KEY_KEY)) return result;
		String currentColumnIsPrimaryStr = currentColumnProperties.getProperty(COLUMN_PROPERTY_IS_PRIMARY_KEY_KEY);
		try
		{
			result = Boolean.parseBoolean(currentColumnIsPrimaryStr);
		}
		catch(Exception e)
		{
			result = false;
		}
		return result;
	}
	
	private boolean IsColumnAAutogeneratedValueColumn(String ColumnName)
	{
		boolean result = false;
		if(ColumnName == null) return result;
		if(!_columnNameIndexedColumnPropertiesMap.containsKey(ColumnName)) return result;
		Properties currentColumnProperties = _columnNameIndexedColumnPropertiesMap.get(ColumnName);
		if(!currentColumnProperties.containsKey(COLUMN_PROPERTY_IS_AUTOGENERATED_KEY)) return result;
		String currentColumnIsPrimaryStr = currentColumnProperties.getProperty(COLUMN_PROPERTY_IS_AUTOGENERATED_KEY);
		try
		{
			result = Boolean.parseBoolean(currentColumnIsPrimaryStr);
		}
		catch(Exception e)
		{
			result = false;
		}
		return result;
	}
	
	private boolean IsColumnANotNullValueColumn(String ColumnName)
	{
		boolean result = false;
		if(ColumnName == null) return result;
		if(!_columnNameIndexedColumnPropertiesMap.containsKey(ColumnName)) return result;
		Properties currentColumnProperties = _columnNameIndexedColumnPropertiesMap.get(ColumnName);
		if(!currentColumnProperties.containsKey(COLUMN_PROPERTY_IS_NOT_NULL_VALUE)) return result;
		String currentColumnIsNotNullStr = currentColumnProperties.getProperty(COLUMN_PROPERTY_IS_NOT_NULL_VALUE);
		try
		{
			result = Boolean.parseBoolean(currentColumnIsNotNullStr);
		}
		catch(Exception e)
		{
			result = false;
		}
		return result;
	}
	
	private boolean IsColumnAFirstColumn(String ColumnName)
	{
		boolean result = false;
		if(ColumnName == null) return result;
		if(!_columnNameIndexedColumnPropertiesMap.containsKey(ColumnName)) return result;
		Properties currentColumnProperties = _columnNameIndexedColumnPropertiesMap.get(ColumnName);
		if(!currentColumnProperties.containsKey(COLUMN_PROPERTY_IS_FIRST_COLUMN)) return result;
		String currentColumnIsFirstStr = currentColumnProperties.getProperty(COLUMN_PROPERTY_IS_FIRST_COLUMN);
		try
		{
			result = Boolean.parseBoolean(currentColumnIsFirstStr);
		}
		catch(Exception e)
		{
			result = false;
		}
		return result;
	}
	
	private boolean IsColumnALastColumn(String ColumnName)
	{
		boolean result = false;
		if(ColumnName == null) return result;
		if(!_columnNameIndexedColumnPropertiesMap.containsKey(ColumnName)) return result;
		Properties currentColumnProperties = _columnNameIndexedColumnPropertiesMap.get(ColumnName);
		if(!currentColumnProperties.containsKey(COLUMN_PROPERTY_IS_LAST_COLUMN)) return result;
		String currentColumnIsLastStr = currentColumnProperties.getProperty(COLUMN_PROPERTY_IS_LAST_COLUMN);
		try
		{
			result = Boolean.parseBoolean(currentColumnIsLastStr);
		}
		catch(Exception e)
		{
			result = false;
		}
		return result;
	}
	
	
	
}
